openapi: 3.0.1

info:
  x-logo:
    url: "https://i.imgur.com/YI6VLQx.png"
    backgroundColor: "#f9f8f1"
    altText: "IQ Telemetry"


  title: Payway Bookings API v1
  description: |-
    
    Payway Bookings API implementing all functionality around booking timeslots and retrieving bookings status.
    If you wish to access this api, please contact us with the desired endpoints and reason.
    
    NOTE: Access restricted, logged, rate limited API.
  

  contact:
    name: Ryan Pomario
    email: ryan@iqt.co.za

  version: 1.0.6

externalDocs:
  description: Click here to learn more about Payway.
  url: https://payway3.iqt.co.za

tags:
  - name: Data
    description: Endpoints that interact with data via the database.
  - name: Functions
    description: Endpoints that perform functions relating to the database.

  - name: Bookings Status
    description: Endpoints that allow you to view the status of bookings.
  - name: Reserve Booking
    description: Endpoints that allow you to reserve bookings for a timeslot.
  - name: Release Booking
    description: Endpoints that allow you to release / "give up" bookings for a timeslot.
  - name: Request Verification
    description: Endpoints that allow you to request a verification email for customer.
  - name: Verify Customer
    description: Endpoints that allow you to verify a customer using their verification code.
  - name: Customers
    description: Endpoints that allow you to interact with customers data.


x-tagGroups:
  - name: Booking Logic
    tags:
      - Booking Status
      - Reserve Booking
      - Release Booking
  - name: Customer Management
    tags:
      - Request Verification
      - Verify Customer
  - name: Platform Configurations and Administration
    tags:
      - Customers

servers:
  - url: '{scheme}://payway3.iqt.co.za/{version}/booking'
    variables:
      scheme:
        description: 'The API is accessible via https.'
        enum:
          - 'https'
        default: 'https'
      version:
        description: 'The API version.'
        enum:
          - 'v1'
        default: 'v1'

paths:
  '/bookings/all/{device_id}':
    get:
      tags:
        - Data
        - Booking Status
      summary: Get all bookings by device id
      description: |-
        This endpoint is used to obtain all booking objects for a device by its id.
        By default all devices have 2 weeks of booking slots generated by the backend. These 2 weeks are in the future, 
        and not in the past. In other words, there will always be a rolling 2 week period of bookings.
        
        Status, booking_guid (randomly generated unique identifier), version and customer_id fields are all [parallel arrays](https://www.geeksforgeeks.org/parallel-array/) of 24 length. Each position in the array represents a hour
        in the day.
        
        e.g:
        customer_id ---- [0,2,6,1,0,0,4,6,5,8,0,1,3,0,0,0,0,0,0,0,0,0,0,0]
        * Position 3 of array, customer id "6", is the 3rd hour / 03:00 in the day.
      

      operationId: getBookingsAllByDevice
      x-tag-permissions:
        - devices
        - customers
        - sites
      responses:
        '401':
          description: Authorization information is missing or invalid.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedResponse"
        '400':
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        '200':
          description: Obtain an array of "booking" items from the database
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/BookingsResponseDevice"
                example:
                  {
                    "success": true,
                    "data": [
                      {
                        "id": 1,
                        "booking_guid": [
                          "57e8ffae-558e-11ef-af9f-4bbe8661d8e8",
                          "57e8ffaf-558e-11ef-af9f-cf8b36714bd7",
                          "57e8ffb0-558e-11ef-af9f-5b2c5ebd9dc5",
                          "57e8ffb1-558e-11ef-af9f-5bf8ad8a0dff",
                          "57e8ffb2-558e-11ef-af9f-3feacc8b3a27",
                          "57e8ffb3-558e-11ef-af9f-473d60c096f4",
                          "57e8ffb4-558e-11ef-af9f-5b73a8db1e0a",
                          "57e8ffb5-558e-11ef-af9f-ffcd4ca01865",
                          "57e8ffb6-558e-11ef-af9f-7fe35d411510",
                          "57e8ffb7-558e-11ef-af9f-fb2929e833cf",
                          "57e8ffb8-558e-11ef-af9f-e34010195cd2",
                          "57e8ffb9-558e-11ef-af9f-63d02f60a895",
                          "57e8ffba-558e-11ef-af9f-eb0108c6e265",
                          "57e8ffbb-558e-11ef-af9f-83e06496a479",
                          "57e8ffbc-558e-11ef-af9f-0f472645aab3",
                          "57e8ffbd-558e-11ef-af9f-836f06d1ba00",
                          "57e8ffbe-558e-11ef-af9f-d73b9bb274e5",
                          "57e8ffbf-558e-11ef-af9f-7baf89099b29",
                          "57e8ffc0-558e-11ef-af9f-bf51939434aa",
                          "57e8ffc1-558e-11ef-af9f-637e501d567f",
                          "57e8ffc2-558e-11ef-af9f-4f3fc8c697c6",
                          "57e8ffc3-558e-11ef-af9f-4fd4e7e8838e",
                          "57e8ffc4-558e-11ef-af9f-4303c2637358",
                          "57e8ffc5-558e-11ef-af9f-8b4b07af0656"
                        ],
                        "version": [
                          1,
                          1,
                          1,
                          1,
                          1,
                          1,
                          1,
                          1,
                          1,
                          1,
                          1,
                          1,
                          1,
                          1,
                          1,
                          1,
                          1,
                          1,
                          1,
                          1,
                          1,
                          1,
                          1,
                          1
                        ],
                        "status": [
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0
                        ],
                        "date": "2024-08-08T00:00:00Z",
                        "site_id": 30,
                        "device_name": "Washer02",
                        "site_name": "Herb Street, Johannesburg",
                        "booked_amount": 0
                      }
                    ],
                    "entries": 1,
                    "timestamp": 1723639902458
                  }
    parameters:
      - in: path
        name: device_id
        schema:
          type: integer
      - $ref: "#/components/parameters/limitParam"
      - $ref: "#/components/parameters/offsetParam"
      - $ref: "#/components/parameters/orderParam"
      - $ref: "#/components/parameters/countParam"
      - $ref: "#/components/parameters/others"
      - $ref: "#/components/parameters/smallerThanParam"
      - $ref: "#/components/parameters/greaterThanParam"
      - $ref: "#/components/parameters/smallerThanEqualParam"
      - $ref: "#/components/parameters/greaterThanEqualParam"

  '/bookings/all/site/{site_id}':
    get:
      tags:
        - Data
        - Booking Status
      operationId: getBookingsAllBySite
      x-tag-permissions:
        - devices
        - customers
        - sites
      summary: Get all bookings by site id
      description: |-
        This endpoint is used to obtain all booking objects for a site. This will return all devices that have bookings enabled under the site.
        By default all devices have 2 weeks of booking slots generated by the backend. These 2 weeks are in the future, 
        and not in the past. In other words, there will always be a rolling 2 week period of bookings.

        Status, booking_guid (randomly generated unique identifier), version and customer_id fields are all [parallel arrays](https://www.geeksforgeeks.org/parallel-array/) of 24 length. Each position in the array represents a hour
        in the day.

        e.g:
        customer_id ---- [0,2,6,1,0,0,4,6,5,8,0,1,3,0,0,0,0,0,0,0,0,0,0,0]
        * Position 3 of array, customer id "6", is the 3rd hour / 03:00 in the day.
        
        Each customer has a daily booking limited defined and can be blocked from the API. These values can be found in the customers table.

      responses:
        '401':
          description: Authorization information is missing or invalid.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedResponse"
        '400':
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        '200':
          description: Obtain an array of "booking" items from the database
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/BookingsResponseSite"
                example:
                  {
                    "success": true,
                    "data": [
                      {
                        "id": 1,
                        "booking_guid": [
                          "57e8ffae-558e-11ef-af9f-4bbe8661d8e8",
                          "57e8ffaf-558e-11ef-af9f-cf8b36714bd7",
                          "57e8ffb0-558e-11ef-af9f-5b2c5ebd9dc5",
                          "57e8ffb1-558e-11ef-af9f-5bf8ad8a0dff",
                          "57e8ffb2-558e-11ef-af9f-3feacc8b3a27",
                          "57e8ffb3-558e-11ef-af9f-473d60c096f4",
                          "57e8ffb4-558e-11ef-af9f-5b73a8db1e0a",
                          "57e8ffb5-558e-11ef-af9f-ffcd4ca01865",
                          "57e8ffb6-558e-11ef-af9f-7fe35d411510",
                          "57e8ffb7-558e-11ef-af9f-fb2929e833cf",
                          "57e8ffb8-558e-11ef-af9f-e34010195cd2",
                          "57e8ffb9-558e-11ef-af9f-63d02f60a895",
                          "57e8ffba-558e-11ef-af9f-eb0108c6e265",
                          "57e8ffbb-558e-11ef-af9f-83e06496a479",
                          "57e8ffbc-558e-11ef-af9f-0f472645aab3",
                          "57e8ffbd-558e-11ef-af9f-836f06d1ba00",
                          "57e8ffbe-558e-11ef-af9f-d73b9bb274e5",
                          "57e8ffbf-558e-11ef-af9f-7baf89099b29",
                          "57e8ffc0-558e-11ef-af9f-bf51939434aa",
                          "57e8ffc1-558e-11ef-af9f-637e501d567f",
                          "57e8ffc2-558e-11ef-af9f-4f3fc8c697c6",
                          "57e8ffc3-558e-11ef-af9f-4fd4e7e8838e",
                          "57e8ffc4-558e-11ef-af9f-4303c2637358",
                          "57e8ffc5-558e-11ef-af9f-8b4b07af0656"
                        ],
                        "version": [
                          1,
                          1,
                          1,
                          1,
                          1,
                          1,
                          1,
                          1,
                          1,
                          1,
                          1,
                          1,
                          1,
                          1,
                          1,
                          1,
                          1,
                          1,
                          1,
                          1,
                          1,
                          1,
                          1,
                          1
                        ],
                        "status": [
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0
                        ],
                        "date": "2024-08-08T00:00:00Z",
                        "device_id": 154,
                        "device_name": "Washer02",
                        "site_name": "Herb Street, Johannesburg",
                        "booked_amount": 0
                      }
                    ],
                    "entries": 1,
                    "timestamp": 1723639902458
                  }

    parameters:
      - in: path
        name: site_id
        schema:
          type: integer
      - $ref: "#/components/parameters/limitParam"
      - $ref: "#/components/parameters/offsetParam"
      - $ref: "#/components/parameters/orderParam"
      - $ref: "#/components/parameters/countParam"
      - $ref: "#/components/parameters/others"
      - $ref: "#/components/parameters/smallerThanParam"
      - $ref: "#/components/parameters/greaterThanParam"
      - $ref: "#/components/parameters/smallerThanEqualParam"
      - $ref: "#/components/parameters/greaterThanEqualParam"

  '/bookings/all/customer/{customer_id}':
    get:
      tags:
        - Data
        - Booking Status
      operationId: getBookingsAllByCustomer
      x-tag-permissions:
        - devices
        - customers
        - sites
      summary: Get all bookings by customer id
      description: |-
        This endpoint is used to obtain all booking objects for a customer. This will return all devices that have bookings enabled under the site.
        By default all devices have 2 weeks of booking slots generated by the backend. These 2 weeks are in the future, 
        and not in the past. In other words, there will always be a rolling 2 week period of bookings.

        Status, booking_guid (randomly generated unique identifier), version and customer_id fields are all [parallel arrays](https://www.geeksforgeeks.org/parallel-array/) of 24 length. Each position in the array represents a hour
        in the day.

        e.g:
        customer_id ---- [0,2,6,1,0,0,4,6,5,8,0,1,3,0,0,0,0,0,0,0,0,0,0,0]
        * Position 3 of array, customer id "6", is the 3rd hour / 03:00 in the day.
        
        Each customer has a daily booking limited defined and can be blocked from the API. These values can be found in the customers table.

      responses:
        '401':
          description: Authorization information is missing or invalid.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedResponse"
        '400':
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        '200':
          description: Obtain an array of "booking" items from the database
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/BookingsResponseCustomer"
                example:
                  {
                    "success": true,
                    "data": [
                      {
                        "id": 1,
                        "booking_guid": [
                          "57e8ffae-558e-11ef-af9f-4bbe8661d8e8",
                          "57e8ffaf-558e-11ef-af9f-cf8b36714bd7",
                          "57e8ffb0-558e-11ef-af9f-5b2c5ebd9dc5",
                          "57e8ffb1-558e-11ef-af9f-5bf8ad8a0dff",
                          "57e8ffb2-558e-11ef-af9f-3feacc8b3a27",
                          "57e8ffb3-558e-11ef-af9f-473d60c096f4",
                          "57e8ffb4-558e-11ef-af9f-5b73a8db1e0a",
                          "57e8ffb5-558e-11ef-af9f-ffcd4ca01865",
                          "57e8ffb6-558e-11ef-af9f-7fe35d411510",
                          "57e8ffb7-558e-11ef-af9f-fb2929e833cf",
                          "57e8ffb8-558e-11ef-af9f-e34010195cd2",
                          "57e8ffb9-558e-11ef-af9f-63d02f60a895",
                          "57e8ffba-558e-11ef-af9f-eb0108c6e265",
                          "57e8ffbb-558e-11ef-af9f-83e06496a479",
                          "57e8ffbc-558e-11ef-af9f-0f472645aab3",
                          "57e8ffbd-558e-11ef-af9f-836f06d1ba00",
                          "57e8ffbe-558e-11ef-af9f-d73b9bb274e5",
                          "57e8ffbf-558e-11ef-af9f-7baf89099b29",
                          "57e8ffc0-558e-11ef-af9f-bf51939434aa",
                          "57e8ffc1-558e-11ef-af9f-637e501d567f",
                          "57e8ffc2-558e-11ef-af9f-4f3fc8c697c6",
                          "57e8ffc3-558e-11ef-af9f-4fd4e7e8838e",
                          "57e8ffc4-558e-11ef-af9f-4303c2637358",
                          "57e8ffc5-558e-11ef-af9f-8b4b07af0656"
                        ],
                        "version": [
                          1,
                          1,
                          1,
                          1,
                          1,
                          1,
                          1,
                          1,
                          1,
                          1,
                          1,
                          1,
                          1,
                          1,
                          1,
                          1,
                          1,
                          1,
                          1,
                          1,
                          1,
                          1,
                          1,
                          1
                        ],
                        "status": [
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0
                        ],
                        "date": "2024-08-08T00:00:00Z",
                        "device_id": 154,
                        "device_uid": "aab473ag",
                        "device_name": "Washer02",
                        "site_name": "Herb Street, Johannesburg",
                        "booked_amount": 0
                      }
                    ],
                    "entries": 1,
                    "timestamp": 1723639902458
                  }

    parameters:
      - in: path
        name: customer_id
        schema:
          type: integer
      - $ref: "#/components/parameters/limitParam"
      - $ref: "#/components/parameters/offsetParam"
      - $ref: "#/components/parameters/orderParam"
      - $ref: "#/components/parameters/countParam"
      - $ref: "#/components/parameters/others"
      - $ref: "#/components/parameters/smallerThanParam"
      - $ref: "#/components/parameters/greaterThanParam"
      - $ref: "#/components/parameters/smallerThanEqualParam"
      - $ref: "#/components/parameters/greaterThanEqualParam"

  '/bookings/reserve/{booking_guid}/{version}':
    post:
      tags:
        - Functions
        - Reserve Booking
      summary: Reserve booking for timeslot
      description: |-
        This endpoint allows customers to book a timeslot using a GUID, randomly generated, unique identifier.
        On booking, the version is incremented preventing race conditions. 
        
        If GUID or version is incorrect, the customer will not be able to book the slot. 

      operationId: createBookingsReserve
      x-tag-permissions:
        - devices
      responses:
        '401':
          description: Authorization information is missing or invalid.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedResponse"
        '400':
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        '200':
          description: Returns status of attempted booking
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/BookingsReserveResponse"
                example:
                  {
                    "success": true,
                    "data": {
                      "booked_result": false,
                      "reason": "Reserved. [13]",
                      "message_code": "BRSS-001"
                    },
                    "timestamp": 1723639902458
                  }
      parameters:
        - in: path
          name: booking_guid
          schema:
            type: string
        - in: path
          name: version
          schema:
            type: integer
            pattern: ^[0-9]*$

  '/bookings/release/{booking_guid}':
    post:
      tags:
        - Functions
        - Release Booking
      summary: Release booking
      description: |-
        This endpoint allows customers to release / cancel their booking using the GUID, randomly generated, unique identifier.

      operationId: releaseBooking
      x-tag-permissions:
        - devices
      responses:
        '401':
          description: Authorization information is missing or invalid.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedResponse"
        '400':
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        '200':
          description: Returns status of attempted release
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/BookingsReleaseResponse"
                example:
                  {
                    "success": true,
                    "data": {
                      "booked_result": false,
                      "reason": "Released booking. [13]",
                      "message_code": "BRS-001"
                    },
                    "timestamp": 1723639902458
                  }
    parameters:
      - in: path
        name: booking_guid
        schema:
          type: string

  '/customer/verify':
    post:
      tags:
        - Functions
        - Request Verification
      summary: Request verification for customer
      description: |-
        This endpoint requests verification for customers login. When the endpoint is called, an email is sent to the customers email defined
        in the customers table. These emails can be customized and are stored in the sites table in the API Backend. 
        On every new email request, the "email_sent_amount" found in the customers table is incremented. If the customer 
        requested 5 or more verification emails, they will not be able to request anymore. Manual intervention is needed by
        support to reset this value. This prevents account sharing and email spam abuse.
        
        The customer will received a randomly generated, 6 digit, number. This number can be appended to the end of this endpoints path.
        e.g: /customer/verify/**865320**

      operationId: customerVerify
      requestBody:
        required: true
        content:
          'application/json':
            schema:
              type: object
              additionalProperties: false
              properties:
                email:
                  type: string
                  pattern: '^(([^+<>()[\]\\.,;:\s@"]+(\.[^<>()[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$'
                  example: 'test@iqt.co.za'
                  maxLength: 320
                  description: End-user provided email.
              required: [ "email" ]
      responses:
        '401':
          description: Authorization information is missing or invalid.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedResponse"
        '400':
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        '200':
          description: Returns email used for attempted verification
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/CustomerVerifyResponse"
                example:
                  {
                    "success": true,
                    "data": {
                      "email": "test@iqt.co.za",
                      "reason": "Sent verification code to email.",
                      "message_code": "CRS-001"
                    },
                    "timestamp": 1723639902458
                  }

  '/customer/verify/{verify_token}':
    post:
      tags:
        - Functions
        - Verify Customer
      summary: Complete customer verification
      description: |-
        This endpoint uses the code obtained in the base endpoint "/customer/verify" to verify and provide a **x-customer-token**.
        The x-customer-token is used to identify and restrict customers to the correct resources in this API. 
        
        Once verified for the first time, the "verified" boolean is set in the customers table.
        
        **NOTE:** The x-customer-token does not expire. It should be store securely due to the nature of the type of authentication. x-customer-token's
        will only "expire" on new successful verification as a new token is generated.

      operationId: customerVerifyToken
      requestBody:
        required: true
        content:
          'application/json':
            schema:
              type: object
              additionalProperties: false
              properties:
                email:
                  type: string
                  pattern: '^(([^+<>()[\]\\.,;:\s@"]+(\.[^<>()[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$'
                  example: 'test@iqt.co.za'
                  maxLength: 320
                  description: End-user provided email.
              required: [ "email" ]
      responses:
        '401':
          description: Authorization information is missing or invalid.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedResponse"
        '400':
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        '200':
          description: Returns result of attempted verification
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/CustomerVerifyTokenResponse"
                example:
                  {
                    "success": true,
                    "data": {
                      "customer": {
                        "id": 4,
                        "image_guid": null
                      },
                      "token": "1ef975f0-9fed-6e40-8ff7-66b0aee460f1",
                    },
                    "timestamp": 1723639902458
                  }
    parameters:
      - in: path
        name: verify_token
        schema:
          type: string

  '/customers/{id}':
    get:
      tags:
        - Data
        - Customers
      operationId: getCustomers
      x-tag-permissions:
        - customers
        - devices
      summary: Get object for customers
      description: |-
        This endpoint manages a second type of user in Payway called customers.
        Customers are not direct users of the Payway system, but rather consumers of features and services. e.g Walk in store customer, a student, etc.
        
        Customers are primarily used for the booking system.
        Customers are linked to a Payway proxy user, service account. This ensures access is restricted to the correct organisation and resources
        in terms of the Access and Roles Based rules of the service account.

      responses:
        '401':
          description: Authorization information is missing or invalid.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedResponse"
        '400':
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        '200':
          description: Obtain an array of "customer" items from the database
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/CustomersResponse"
                example:
                  {
                    "success": true,
                    "data": {
                      "customer": [
                        {
                          "id": 1,
                          "daily_booking_limit": 2,
                          "reserved_booking_limit": 4,
                          "blocked": false,
                          "email": "customer@customer.com",
                          "mifare_card_number": "V156373",
                          "verified": true,
                          "companies": {
                            "id": 1,
                            "name": "Company 1",
                            "support_text": null,
                            "contact_person": "Stark",
                            "contact_number": "+2711122234"
                          },
                          "organisations": {
                            "id": 552,
                            "name": "Stark Organisation",
                            "logo_url": "https://payway3.iqt.co.za/images/org-552-30256.png"
                          },
                          "daily_booking_limit_used": 1,
                          "reserved_booking_limit_used": 1
                        }
                      ],
                      "cardholder": [
                        {
                          "id": 1,
                          "card_no": "aaa34333",
                          "first_name": "aaa34333",
                          "last_name": "aaa34333",
                          "user_number": "1111",
                          "contact_number": "+2711111111",
                          "negative_credit_allowed": true,
                          "throttle_multiple_requests": true,
                          "balance_accumulate": true,
                          "cost_centre": "1",
                          "wallet": "0.00",
                          "topup_value": "1.00",
                          "topup_reoccurrence": true,
                          "topup_date": null,
                          "topup_amount": null,
                          "last_transaction_device_uid": null,
                          "last_transaction_timestamp": null,
                          "last_transaction_result": null,
                          "import_site_id": null,
                          "import_guid": null,
                          "created_at": "2024-10-23T07:39:51.991Z",
                          "updated_at": "2024-10-23T07:39:51.991Z",
                          "active": true,
                          "users": {
                            "id": 1,
                            "username": "Adowa"
                          },
                          "sites": {
                            "id": [
                              null
                            ],
                            "name": [
                              null
                            ]
                          }
                        }
                      ]
                    },
                    "total_count": null,
                    "timestamp": 1723639902458
                  }
    parameters:
      - in: path
        name: id
        schema:
          type: integer

components:
  securitySchemes:
    XUserToken:
      type: apiKey
      in: header
      name: x-user-token
  schemas:
    BookingsResponseDevice:
      type: object
      properties:
        date:
          type: string
          description: Date of booking customer makes. Does not include time.
        status:
          type: array
          description: |-
            * Status 0: Available.
            * Status 1: Booked by someone.
            * Status 2: Booked by you.
            * Status 3: You missed booking.
            * Status 4: Used by someone
            * Status 5: Used by you
            * Status 10: Missed booking by someone.
          items:
            type: integer
        customer_id:
          type: array
          description: Array of customer id relating to their booked timeslot. customer_id parallel to booking_guid.
          items:
            type: string
        booking_guid:
          type: array
          description: Randomly generated, unique, identification of booking slot in day.
          items:
            type: string
        site_id:
          type: integer
        device_name:
          type: string
        site_name:
          type: string
        version:
          type: array
          description: |-
            On any update to data in the corresponding position in array, the version is incremented. 
            This prevents race conditions and double bookings.
          items:
            type: integer
    BookingsResponseSite:
      type: object
      properties:
        date:
          type: string
          description: Date of booking customer makes. Does not include time.
        status:
          type: array
          description: |-
            * Status 0: Available.
            * Status 1: Booked by someone.
            * Status 2: Booked by you.
            * Status 3: You missed booking.
            * Status 4: Used by someone
            * Status 5: Used by you
            * Status 10: Missed booking by someone.
          items:
            type: integer
        customer_id:
          type: array
          description: Array of customer id relating to their booked timeslot. customer_id parallel to booking_guid.
          items:
            type: string
        booking_guid:
          type: array
          description: Randomly generated, unique, identification of booking slot in day.
          items:
            type: string
        device_id:
          type: integer
        device_name:
          type: string
        site_name:
          type: string
        version:
          type: array
          description: |-
            On any update to data in the corresponding position in array, the version is incremented. 
            This prevents race conditions and double bookings.
          items:
            type: integer
    BookingsResponseCustomer:
      type: object
      properties:
        date:
          type: string
          description: Date of booking customer makes. Does not include time.
        status:
          type: array
          description: |-
            * Status 0: Available.
            * Status 1: Booked by someone.
            * Status 2: Booked by you.
            * Status 3: You missed booking.
          items:
            type: string
        customer_id:
          type: array
          description: Array of customer id relating to their booked timeslot. customer_id parallel to booking_guid.
          items:
            type: string
        booking_guid:
          type: array
          description: Randomly generated, unique, identification of booking slot in day.
          items:
            type: string
        device_id:
          type: integer
        device_uid:
          type: string
        device_name:
          type: string
        site_name:
          type: string
        version:
          type: array
          description: |-
            On any update to data in the corresponding position in array, the version is incremented. 
            This prevents race conditions and double bookings.
          items:
            type: integer
    BookingsReserveResponse:
      type: object
      properties:
        booked_result:
          type: boolean
        reason:
          type: string
        message_code:
          type: string
    BookingsReleaseResponse:
      type: object
      properties:
        release_result:
          type: boolean
        reason:
          type: string
        message_code:
          type: string
    CustomerVerifyTokenResponse:
      type: object
      properties:
        customers:
          type: object
          properties:
            id:
              type: number
              description: Customers primary key identification.
            image_guid:
              type: string
              description: Face identification guid.
        token:
          type: string
          description: x-customer-token
    CustomerVerifyResponse:
      type: object
      properties:
        email:
          type: string
        reason:
          type: string
        message_code:
          type: string
    CustomersResponse:
      type: object
      properties:
        customers:
          type: object
          properties:
            id:
              type: integer
            daily_booking_limit:
              type: integer
              description: The total number of bookings a user can make in one day.
            reserved_booking_limit:
              type: integer
              description: The total number of reserved bookings a user can have at once.
            blocked:
              type: boolean
              description: Prevents user from accessing the API.
            email:
              type: string
            mifare_card_number:
              type: string
            verified:
              type: boolean
              description: Has the user verified their email?
            companies:
              type: object
              properties:
                id:
                  type: integer
                name:
                  type: string
                support_text:
                  type: string
                contact_person:
                  type: string
                contact_number:
                  type: string
            organisations:
              type: object
              properties:
                id:
                  type: integer
                name:
                  type: string
                logo_url:
                  type: string
            daily_booking_limit_used:
              type: integer
              description: The amount of daily bookings used.
            reserved_booking_limit_used:
              type: integer
              description: The amount of total bookings used.
        cardholder:
          type: object
          properties:
            id:
              type: integer
            card_no:
              type: string
            first_name:
              type: string
            last_name:
              type: string
            user_number:
              type: string
            contact_number:
              type: string
            negative_credit_allowed:
              type: boolean
            throttle_multiple_requests:
              type: boolean
            balance_accumulate:
              type: boolean
            cost_centre:
              type: string
            wallet:
              type: number
            topup_value:
              type: number
            topup_reoccurrence:
              type: boolean
            topup_date:
              type: string
            topup_amount:
              type: number
            last_transaction_device_uid:
              type: string
            last_transaction_timestamp:
              type: string
            last_transaction_result:
              type: string
            import_site_id:
              type: integer
            import_guid:
              type: string
            created_at:
              type: string
            updated_at:
              type: string
            active:
              type: boolean
            users:
              type: object
              properties:
                id:
                  type: integer
                username:
                  type: string
            sites:
              type: object
              properties:
                id:
                  type: array
                  items:
                    type: integer
                name:
                  type: array
                  items:
                    type: string



    # Status codes
    ValidationFailResponse:
      type: object
      properties:
        err:
          type: string
      example:
        {
          "err": [
            {
              "instancePath": "/requestBody",
              "schemaPath": "#/properties/requestBody/additionalProperties",
              "keyword": "additionalProperties",
              "params": {
                "additionalProperty": "emulation_id"
              },
              "message": "must NOT have additional properties"
            }
          ]
        }
    AccountNotActiveResponse:
      type: object
      properties:
        err:
          type: string
          description: User has been deactivated.
      example:
        {
          "err": "Account is not active. [John Doe]"
        }
    AccountPasswordResetResponse:
      type: object
      properties:
        err:
          type: string
          description: User needs to reset their password before being allowed login access again.
      example:
        {
          "err": "Please reset password before login. [John Doe]"
        }
    UnauthorizedResponse:
      type: object
      properties:
        err:
          type: string
          description: User does not have permissions to access endpoint operation.
      example:
        {
          "err": "Unauthorized. [getUserAccess]"
        }
    ErrorResponse:
      type: object
      properties:
        err:
          type: string
          description: Any internal error is returned here.
      example:
        {
          "success": false,
          "error": "[INTERNAL] error: insert or update on table \"devices\" violates foreign key constraint \"devices_host_hardware_id_fk\"",
          "timestamp": 1723639902458
        }


    numberIndex:
      type: string
      pattern: '[0-9]$'
    selectAll:
      type: string
      enum:
        - _all

  parameters:
    idParam:
      in: path
      name: id
      required: true
      schema:
        oneOf:
          - $ref: "#/components/schemas/numberIndex"
          - $ref: "#/components/schemas/selectAll"
      examples:
        id:
          value: 12
          summary: Search by specific primary key aka "id".
        all:
          value: '_all'
          summary: Search by all accessible objects.

    offsetParam:
      in: query
      name: offset
      required: false
      schema:
        type: integer
        minimum: 0
      example: 1

    limitParam:
      in: query
      name: limit
      required: false
      schema:
        type: integer
        minimum: 0
      example: 3

    orderParam:
      in: query
      name: order_by
      required: false
      schema:
        anyOf:
          - type: string
            pattern: ^\w+:(asc|desc)$
          - type: array
            items:
              type: string
            pattern: ^\w+:(asc|desc)$
      examples:
        asc:
          value: "field:asc"
          summary: Filters the field specific by ascending order.
        desc:
          value: "field:desc"
          summary: Filters the field specific by descending order.

    smallerThanParam:
      in: query
      name: st
      required: false
      schema:
        anyOf:
          - type: string
            anyOf:
              - pattern: ^[\w.]+:([+-]?([0-9]*[.])?[0-9]+)$
              - pattern: ^[\w.]+:\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}$
              - pattern: ^[\w.]+:\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}[+-|%20]\d{2}:\d{2}
          - type: array
            items:
              anyOf:
                - type: string
                  pattern: ^[\w.]+:([+-]?([0-9]*[.])?[0-9]+)$
                - type: string
                  pattern: ^[\w.]+:\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}$
                - type: string
                  pattern: ^[\w.]+:((?:(\d{4}-\d{2}-\d{2})T(\d{2}:\d{2}:\d{2}(?:\.\d+)?))(Z|[\+-]\d{2}:\d{2})?)$
      examples:
        smallerThan:
          value: "field_name:100"
          summary: Filters the field smaller than provided number.
        smallerThanDate:
          value: "field_name:2024-04-10 00:00:00"
          summary: Filters the field smaller than the provided date.
        greaterThanDate:
          value: "field_name:2024-10-09T12:21:26+05:30"
          summary: Filters the field smaller than the provided date with timestamp.
    greaterThanParam:
      in: query
      name: gt
      required: false
      schema:
        anyOf:
          - type: string
            anyOf:
              - pattern: ^[\w.]+:([+-]?([0-9]*[.])?[0-9]+)$
              - pattern: ^[\w.]+:\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}$
              - pattern: ^[\w.]+:\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}[+-|%20]\d{2}:\d{2}
          - type: array
            items:
              anyOf:
                - type: string
                  pattern: ^[\w.]+:([+-]?([0-9]*[.])?[0-9]+)$
                - type: string
                  pattern: ^[\w.]+:\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}$
                - type: string
                  pattern: ^[\w.]+:((?:(\d{4}-\d{2}-\d{2})T(\d{2}:\d{2}:\d{2}(?:\.\d+)?))(Z|[\+-]\d{2}:\d{2})?)$
      examples:
        greaterThanEqual:
          value: "field_name:100"
          summary: Filters the field greater than provided number.
        greaterThanEqualDate:
          value: "field_name:2024-04-10 00:00:00"
          summary: Filters the field greater than the provided date.
        greaterThanDate:
          value: "field_name:2024-10-09T12:21:26+05:30"
          summary: Filters the field smaller than the provided date with timestamp.
    smallerThanEqualParam:
      in: query
      name: ste
      required: false
      schema:
        anyOf:
          - type: string
            anyOf:
              - pattern: ^[\w.]+:([+-]?([0-9]*[.])?[0-9]+)$
              - pattern: ^[\w.]+:\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}$
              - pattern: ^[\w.]+:\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}[+-|%20]\d{2}:\d{2}
          - type: array
            items:
              anyOf:
                - type: string
                  pattern: ^[\w.]+:([+-]?([0-9]*[.])?[0-9]+)$
                - type: string
                  pattern: ^[\w.]+:\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}$
                - type: string
                  pattern: ^[\w.]+:((?:(\d{4}-\d{2}-\d{2})T(\d{2}:\d{2}:\d{2}(?:\.\d+)?))(Z|[\+-]\d{2}:\d{2})?)$
      examples:
        smallerThanEqual:
          value: "field_name:100"
          summary: Filters the field smaller than and equal to provided number.
        smallerThanEqualDate:
          value: "field_name:2024-04-10 00:00:00"
          summary: Filters the field smaller than and equal to the provided date.
        greaterThanDate:
          value: "field_name:2024-10-09T12:21:26+05:30"
          summary: Filters the field smaller than the provided date with timestamp.
    greaterThanEqualParam:
      in: query
      name: gte
      required: false
      schema:
        anyOf:
          - type: string
            anyOf:
              - pattern: ^[\w.]+:([+-]?([0-9]*[.])?[0-9]+)$
              - pattern: ^[\w.]+:\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}$
              - pattern: ^[\w.]+:\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}[+-|%20]\d{2}:\d{2}
          - type: array
            items:
              anyOf:
                - type: string
                  pattern: ^[\w.]+:([+-]?([0-9]*[.])?[0-9]+)$
                - type: string
                  pattern: ^[\w.]+:\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}$
                - type: string
                  pattern: ^[\w.]+:((?:(\d{4}-\d{2}-\d{2})T(\d{2}:\d{2}:\d{2}(?:\.\d+)?))(Z|[\+-]\d{2}:\d{2})?)$
      examples:
        smallerThanEqual:
          value: "field_name:100"
          summary: Filters the field greater than and equal to provided number.
        smallerThanEqualDate:
          value: "field_name:2024-04-10 00:00:00"
          summary: Filters the field greater than and equal to the provided date.
        greaterThanDate:
          value: "field_name:2024-10-09T12:21:26+05:30"
          summary: Filters the field smaller than the provided date with timestamp.

    countParam:
      in: query
      name: count_entries
      required: false
      schema:
        type: boolean
      example: true

    others:
      in: query
      name: field_name
      schema:
        additionalProperties: true
      examples:
        textContaining:
          value: "%Store%"
          summary: Searches in specific field for text containing the word "Store".
        textStart:
          value: "Store%"
          summary: Searches in specific field for text starting with the word "Store".
        textEnd:
          value: "%Store"
          summary: Searches in specific field for text ending with the word "Store".
        textFind:
          value: "Store"
          summary: Searches in specific field for text equaling to "Store".
        numberFind:
          value: 108
          summary: Searches in specific field for number equaling to "108".
        dateFind:
          value: "2024-08-01 00:00:00"
          summary: Searches in specific field for date equaling to "2024-08-01 00:00:00".

security:
  - XUserToken: [ ]
