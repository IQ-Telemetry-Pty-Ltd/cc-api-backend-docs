openapi: 3.0.1

info:
  x-logo:
    url: "https://i.imgur.com/YI6VLQx.png"
    backgroundColor: "#f9f8f1"
    altText: "IQ Telemetry"


  title: Payway Mifare API v1
  description: |-
    
    Payway Mifare API for all administrative functions and reporting. 
    If you wish to access this api, please contact us with the desired endpoints and reason.
    
    NOTE: Access restricted, logged, rate limited API.
  
  
  contact:
    name: Ryan Pomario
    email: ryan@iqt.co.za

  version: 1.0.5

externalDocs:
  description: Click here to learn more about Payway.
  url: https://payway.iqt.co.za

tags:
  - name: Data
    description: Endpoints that interact with data via the database.
  - name: Functions
    description: Endpoints that perform functions relating to the database.

  - name: Users
    description: Endpoints that relate to mifare users.
  - name: Transactions
    description: Endpoints that relate to mifare transactions.
  - name: Sites
    description: Endpoints that relate to mifare sites.
  - name: Products
    description: Endpoints that relate to mifare products.
  - name: Cardholders
    description: Endpoints that relate to mifare cardholders.
  - name: Cardholder Sites
    description: Endpoints that relate to cardholder sites, one to many, linking tables.
  - name: Cardholder Products
    description: Endpoints that relate to cardholder products, one to many, linking tables.
  - name: Authentication
    description: Endpoints that relate to authentication.
  - name: Devices
    description: Endpoints that relate to payway devices.

x-tagGroups:
  - name: API Authentication
    tags:
      - Authentication
  - name: User Management
    tags:
      - Users
  - name: Platform Configurations and Administration
    tags:
      - Sites
      - Products
      - Cardholders
      - Devices
  - name: Reporting and Logging
    tags:
      - Transactions
  - name: Cross-Table Linking
    tags:
      - Cardholder Sites
      - Cardholder Products

servers:
  - url: '{scheme}://payway.iqt.co.za/{version}/mifare'
    variables:
      scheme:
        description: 'The API is accessible via https.'
        enum:
          - 'https'
        default: 'https'
      version:
        description: 'The API version.'
        enum:
          - 'v1'
        default: 'v1'

paths:
  '/users':
    post:
      tags:
        - Data
        - Users
      summary: Create object for users
      description: |-
        Mifare Users are used to control access to resources.  Mifare Users do not require any form of
        authentication. An access token is created when the user is created. This token, `x-user-token`, is present in the 
        header of each call and is used to identify resources. Tokens never expire.
        
        Mifare users are NOT Payway users. The MiFare user token is used in the PayWay Payment Provider
        configuration to identify and link the Mifare service to the PayWay Company entity via the `pos_token'
        field.
        (Refer to https://docs.iqt.co.za/pages/backend.html#tag/Companies-Providers for more detail)
        
        A mifare user only has the ability to access resources that they are directly associated too, 
        unless the "super_user" flag is set, in which case you have system wide access. 
      

      operationId: createUser
      x-tag-permissions:
        - users
      requestBody:
        required: true
        content:
          'application/json':
            schema:
              type: object
              additionalProperties: false
              properties:
                username:
                  type: string
                  maxLength: 100
                  example: Test account
                active:
                  type: boolean
              required: [ "username" ]
      responses:
        '401':
          description: Authorization information is missing or invalid.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedResponse"
        '400':
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        '200':
          description: Returns an array of "user" items from the database
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/UserResponse"
                example:
                  {
                    "success": true,
                    "data": [
                      {
                        "id": 1,
                        "username": "Test Account",
                        "token": "902acE77778A168a7c7d2d08Lm7359zb3",
                        "created_at": "2024-08-27T09:09:48.314Z",
                        "active": true,
                        "super_user": false
                      }
                    ],
                    "entries": 1,
                    "timestamp": 1723639902458
                  }
  '/users/{id}':
    get:
      tags:
        - Data
        - Users
      operationId: getUser
      x-tag-permissions:
        - users
      summary: Get object for user
      responses:
        '401':
          description: Authorization information is missing or invalid.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedResponse"
        '400':
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        '200':
          description: Returns an array of "user" items from the database
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/UserResponse"
                example:
                  {
                    "success": true,
                    "data": [
                      {
                        "id": 1,
                        "username": "Test Account",
                        "token": "902acE77778A168a7c7d2d08Lm7359zb3",
                        "created_at": "2024-07-17T22:00:00.000Z",
                        "super_user": true,
                        "active": true
                      }
                    ],
                    "entries": 1,
                    "timestamp": 1723639902458
                  }
    put:
      summary: Update object for users
      operationId: updateUser
      x-tag-permissions:
        - users
      requestBody:
        required: true
        content:
          'application/json':
            schema:
              type: object
              additionalProperties: false
              properties:
                username:
                  type: string
                  maxLength: 100
                  example: Test account
                active:
                  type: boolean
      responses:
        '401':
          description: Authorization information is missing or invalid.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedResponse"
        '400':
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        '200':
          description: List of user objects
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/UserResponse"
                example:
                  {
                    "success": true,
                    "data": [
                      {
                        "id": 1,
                        "username": "Test Account",
                        "token": "902acE77778A168a7c7d2d08Lm7359zb3",
                        "created_at": "2024-08-27T09:09:48.314Z",
                        "active": true,
                        "super_user": false
                      }
                    ],
                    "entries": 1,
                    "timestamp": 1723639902458
                  }
    delete:
      tags:
        - Data
        - Users
      operationId: deleteUser
      x-tag-permissions:
        - users
      summary: Delete object for user
      responses:
        '401':
          description: Authorization information is missing or invalid.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedResponse"
        '400':
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/DeleteResponse"
              example:
                {
                  "success": true,
                  "data": "Successfully deleted record(s). [1]",
                  "timestamp": 1723108298846
                }
          description: Returns result of delete
    parameters:
      - $ref: "#/components/parameters/idParam"
      - $ref: "#/components/parameters/limitParam"
      - $ref: "#/components/parameters/offsetParam"
      - $ref: "#/components/parameters/orderParam"
      - $ref: "#/components/parameters/countParam"
      - $ref: "#/components/parameters/others"
      - $ref: "#/components/parameters/smallerThanParam"
      - $ref: "#/components/parameters/greaterThanParam"
      - $ref: "#/components/parameters/smallerThanEqualParam"
      - $ref: "#/components/parameters/greaterThanEqualParam"

  '/transactions/{id}':
    get:
      tags:
        - Data
        - Transactions
      summary: Get object for transactions
      description: |-
        This endpoint is used to retrieve all transactional history for the Mifare User. 

      operationId: getTransaction
      x-tag-permissions:
        - users
      responses:
        '401':
          description: Authorization information is missing or invalid.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedResponse"
        '400':
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        '200':
          description: Returns an array of "transaction" items from the database
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/TransactionResponse"
                example:
                  {
                    "success": true,
                    "data": [
                      {
                        "id": 1,
                        "tx_id": "BPVXEIG4ZAX8WIGN02SHUG1Y7",
                        "full_name": "Testing, Account",
                        "card_no": "123",
                        "user_number": "testing",
                        "action": "debit",
                        "wallet": "997",
                        "amount": "1",
                        "balance": "996",
                        "channel": "",
                        "stock_level": 0,
                        "timestamp": 1722848535,
                        "result": "DR",
                        "agent": "abcd",
                        "agent_name": "",
                        "payment_reference_1": "testing",
                        "payment_reference_2": "JIM001",
                        "seq_key": "0",
                        "created_at": "2024-08-05T07:02:15.650Z",
                        "users": {
                          "id": 1,
                          "username": "Testing User"
                        },
                        "cardholders": {
                          "id": 1,
                          "first_name": "testing",
                          "last_name": "testing",
                          "card_no": "123"
                        },
                        "sites": {
                          "id": 1,
                          "name": "testing"
                        }
                      }
                    ],
                    "entries": 1,
                    "timestamp": 1724759082131
                  }
    parameters:
      - $ref: "#/components/parameters/idParam"
      - $ref: "#/components/parameters/limitParam"
      - $ref: "#/components/parameters/offsetParam"
      - $ref: "#/components/parameters/orderParam"
      - $ref: "#/components/parameters/countParam"
      - $ref: "#/components/parameters/others"
      - $ref: "#/components/parameters/smallerThanParam"
      - $ref: "#/components/parameters/greaterThanParam"
      - $ref: "#/components/parameters/smallerThanEqualParam"
      - $ref: "#/components/parameters/greaterThanEqualParam"

  '/sites':
    post:
      tags:
        - Data
        - Sites
      summary: Create object for site
      description: |-
        Sites are physical locations where Mifare is in use.  Mifare cards are linked to one or many Mifare Sites.
        If a card is used on a site that is not linked to the card, the transaction will fail.
        Mifare Sites are mapped one-to-one to PayWay Sites by placing the Mifare Site ID into the `mifare_site_id`
        field found in PayWay Site entity configuration. 
        (refer to https://docs.iqt.co.za/pages/backend.html#tag/Sites for more information)

      operationId: createSite
      x-tag-permissions:
        - sites
        - users
      requestBody:
        required: true
        content:
          'application/json':
            schema:
              type: object
              additionalProperties: false
              properties:
                user_id:
                  type: integer
                name:
                  type: string
                  maxLength: 45
                  pattern: ^[.@&]?[a-zA-Z0-9 ]+[ !.@&()]?[ a-zA-Z0-9!()]+
                  minLength: 1
                  example: BigTech Corp
                address:
                  type: string
                  maxLength: 60
                  example: 123 Street Lane Cape Town 7700
                location:
                  type: string
                  maxLength: 45
                  description: Extra level of physical location identification can be used here.
                  example: Games Room
                  pattern: ^[.@&]?[a-zA-Z0-9 ]+[ !.@&()]?[ a-zA-Z0-9!()]+
                  minLength: 1
                active:
                  type: boolean
              required: [ "user_id", "name", "active" ]
      responses:
        '401':
          description: Authorization information is missing or invalid.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedResponse"
        '400':
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        '200':
          description: Obtain an array of "site" items from the database
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/SitesResponse"
                example:
                  {
                    "success": true,
                    "data": [
                      {
                        "id": 1,
                        "name": "BigTech Corp",
                        "address": "123 Street Lane Cape Town 7700",
                        "location": "Games Room",
                        "active": true,
                        "users": {
                          "id": 1,
                          "username": "Testing User"
                        }
                      }
                    ],
                    "entries": 1,
                    "timestamp": 1724759082131
                  }

  '/sites/{id}':
    get:
      tags:
        - Data
        - Sites
      operationId: getSite
      x-tag-permissions:
        - sites
        - users
      summary: Get object for site
      responses:
        '401':
          description: Authorization information is missing or invalid.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedResponse"
        '400':
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        '200':
          description: Returns an array of "site" items from the database
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/SitesResponse"
                example:
                  {
                    "success": true,
                    "data": [
                      {
                        "id": 1,
                        "user_id": 1,
                        "name": "BigTech Corp",
                        "address": "123 Street Lane Cape Town 7700",
                        "location": "Games Room",
                        "active": true,
                        "users": {
                          "id": 1,
                          "username": "Testing User"
                        }
                      }
                    ],
                    "entries": 1,
                    "timestamp": 1724759082131
                  }
    put:
      tags:
        - Data
        - Sites
      summary: Update object for site
      operationId: updateSite
      x-tag-permissions:
        - sites
        - users
      requestBody:
        required: true
        content:
          'application/json':
            schema:
              type: object
              additionalProperties: false
              properties:
                user_id:
                  type: integer
                name:
                  type: string
                  maxLength: 45
                  pattern: ^[.@&]?[a-zA-Z0-9 ]+[ !.@&()]?[ a-zA-Z0-9!()]+
                  minLength: 1
                  example: BigTech Corp
                address:
                  type: string
                  maxLength: 60
                  example: 123 Street Lane Cape Town 7700
                location:
                  type: string
                  maxLength: 45
                  description: Extra level of physical location identification can be used here.
                  example: Games Room
                  pattern: ^[.@&]?[a-zA-Z0-9 ]+[ !.@&()]?[ a-zA-Z0-9!()]+
                  minLength: 1
                active:
                  type: boolean
      responses:
        '401':
          description: Authorization information is missing or invalid.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedResponse"
        '400':
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        '200':
          description: Returns an array of "site" items updated by query
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/SitesResponse"
                example:
                  {
                    "success": true,
                    "data": [
                      {
                        "id": 1,
                        "user_id": 1,
                        "name": "BigTech Corp",
                        "address": "123 Street Lane Cape Town 7700",
                        "location": "Games Room",
                        "active": true,
                        "users": {
                          "id": 1,
                          "username": "Testing User"
                        }
                      }
                    ],
                    "entries": 1,
                    "timestamp": 1724759082131
                  }
    delete:
      tags:
        - Data
        - Sites
      operationId: deleteSite
      x-tag-permissions:
        - sites
      summary: Delete object for site
      responses:
        '401':
          description: Authorization information is missing or invalid.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedResponse"
        '400':
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/DeleteResponse"
              example:
                {
                  "success": true,
                  "data": "Successfully deleted record(s). [1]",
                  "timestamp": 1723108298846
                }
          description: Returns result of delete
    parameters:
      - $ref: "#/components/parameters/idParam"
      - $ref: "#/components/parameters/limitParam"
      - $ref: "#/components/parameters/offsetParam"
      - $ref: "#/components/parameters/orderParam"
      - $ref: "#/components/parameters/countParam"
      - $ref: "#/components/parameters/others"
      - $ref: "#/components/parameters/smallerThanParam"
      - $ref: "#/components/parameters/greaterThanParam"
      - $ref: "#/components/parameters/smallerThanEqualParam"
      - $ref: "#/components/parameters/greaterThanEqualParam"

  '/products':
    post:
      tags:
        - Data
        - Products
      summary: Create object for products
      description: |-
        In certain applications, such as vending machines, Mifare is used not only to control consumption
        but can also be configured to control consumption of certain items or products specifically linked to Mifare cards.
      operationId: createProduct
      x-tag-permissions:
        - users
        - products
      requestBody:
        required: true
        content:
          'application/json':
            schema:
              type: object
              additionalProperties: false
              properties:
                user_id:
                  type: integer
                description:
                  type: string
                  maxLength: 100
                  description: Product description or name
                  example: Protective welding glove
                product_code:
                  type: string
                  maxLength: 45
                  description: Product code associated with the product
                  example: PWG123
                sap_code:
                  type: string
                  maxLength: 45
                  description: SAP Code
                  example: XGW00001TR
                location:
                  type: string
                  maxLength: 80
                  description: Stock location (can be store room location or channel location in a vending machine)
                  example: ROW 6 COL 10
                  pattern: ^[.@&]?[a-zA-Z0-9 ]+[ !.@&()]?[ a-zA-Z0-9!()]+
                  minLength: 1
                active:
                  type: boolean
              required: [ "user_id", "description", "active" ]
      responses:
        '401':
          description: Authorization information is missing or invalid.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedResponse"
        '400':
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        '200':
          description: Returns product object created by query
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ProductsResponse"
                example:
                  {
                    "success": true,
                    "data": [
                      {
                        "id": 1,
                        "description": "Testing new product.",
                        "product_code": "A78J-HJ3B",
                        "sap_code": "3153",
                        "location": "Games Room",
                        "active": true,
                        "users": {
                          "id": 1,
                          "username": "Tes"
                        }
                      }
                    ],
                    "entries": 1,
                    "timestamp": 1724759082131
                  }

  '/products/{id}':
    get:
      tags:
        - Data
        - Products
      operationId: getProduct
      x-tag-permissions:
        - users
        - products
      summary: Get object for product
      responses:
        '401':
          description: Authorization information is missing or invalid.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedResponse"
        '400':
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        '200':
          description: Returns an array of "product" items from the database
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ProductsResponse"
                example:
                  {
                    "success": true,
                    "data": [
                      {
                        "id": 1,
                        "description": "Testing new product.",
                        "product_code": "A78J-HJ3B",
                        "sap_code": "3153",
                        "location": "Games Room",
                        "active": true,
                        "users": {
                          "id": 1,
                          "username": "Tes"
                        }
                      }
                    ],
                    "entries": 1,
                    "timestamp": 1724759082131
                  }
    put:
      tags:
        - Data
        - Products
      summary: Update object for product
      operationId: updateProduct
      x-tag-permissions:
        - users
        - products
      requestBody:
        required: true
        content:
          'application/json':
            schema:
              type: object
              additionalProperties: false
              properties:
                user_id:
                  type: integer
                description:
                  type: string
                  maxLength: 100
                  description: Product description or name
                  example: Protective welding glove
                product_code:
                  type: string
                  maxLength: 45
                  description: Product code associated with the product
                  example: PWG123
                sap_code:
                  type: string
                  maxLength: 45
                  description: SAP Code
                  example: XGW00001TR
                location:
                  type: string
                  maxLength: 80
                  description: Stock location (can be store room location or channel location in a vending machine)
                  example: ROW 6 COL 10
                  pattern: ^[.@&]?[a-zA-Z0-9 ]+[ !.@&()]?[ a-zA-Z0-9!()]+
                  minLength: 1
                active:
                  type: boolean
      responses:
        '401':
          description: Authorization information is missing or invalid.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedResponse"
        '400':
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        '200':
          description: Returns an array of "product" items updated by query
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ProductsResponse"
                example:
                  {
                    "success": true,
                    "data": [
                      {
                        "id": 1,
                        "description": "Testing new product.",
                        "product_code": "A78J-HJ3B",
                        "sap_code": "3153",
                        "location": "Games Room",
                        "active": true,
                        "users": {
                          "id": 1,
                          "username": "Tes"
                        }
                      }
                    ],
                    "entries": 1,
                    "timestamp": 1724759082131
                  }
    delete:
      tags:
        - Data
        - Products
      operationId: deleteProduct
      x-tag-permissions:
        - products
      summary: Delete object for product
      responses:
        '401':
          description: Authorization information is missing or invalid.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedResponse"
        '400':
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/DeleteResponse"
              example:
                {
                  "success": true,
                  "data": "Successfully deleted record(s). [1]",
                  "timestamp": 1723108298846
                }
          description: Returns result of delete
    parameters:
      - $ref: "#/components/parameters/idParam"
      - $ref: "#/components/parameters/limitParam"
      - $ref: "#/components/parameters/offsetParam"
      - $ref: "#/components/parameters/orderParam"
      - $ref: "#/components/parameters/countParam"
      - $ref: "#/components/parameters/others"
      - $ref: "#/components/parameters/smallerThanParam"
      - $ref: "#/components/parameters/greaterThanParam"
      - $ref: "#/components/parameters/smallerThanEqualParam"
      - $ref: "#/components/parameters/greaterThanEqualParam"

  '/cardholders_sites':
    post:
      tags:
        - Data
        - Cardholder Sites
      summary: Create object for cardholder site
      description: |-
        Links Cards to one or many sites
      operationId: createCardholderSite
      x-tag-permissions:
        - users
        - cardholders
        - sites
        - cardholders_sites
      requestBody:
        required: true
        content:
          'application/json':
            schema:
              type: object
              additionalProperties: false
              properties:
                site_id:
                  type: integer
                cardholder_id:
                  type: integer
                user_id:
                  type: integer
                active:
                  type: boolean
              required: [ "site_id", "cardholder_id", "user_id", "active" ]
      responses:
        '401':
          description: Authorization information is missing or invalid.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedResponse"
        '400':
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        '200':
          description: Returns cardholder site object created by query
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/CardholdersSitesResponse"
                example:
                  {
                    "success": true,
                    "data": [
                      {
                        "id": 1,
                        "site_id": 3,
                        "cardholder_id": 10,
                        "user_id": 3,
                        "active": true
                      }
                    ],
                    "entries": 1,
                    "timestamp": 1724759082131
                  }

  '/cardholders_sites/{id}':
    get:
      tags:
        - Data
        - Cardholder Sites
      operationId: getCardholderSite
      x-tag-permissions:
        - users
        - cardholders
        - sites
        - cardholders_sites
      summary: Get object for cardholder site
      responses:
        '401':
          description: Authorization information is missing or invalid.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedResponse"
        '400':
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        '200':
          description: Returns an array of "cardholder site" items from the database
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/CardholdersSitesResponse"
                example:
                  {
                    "success": true,
                    "data": [
                      {
                        "id": 1,
                        "site_id": 3,
                        "cardholder_id": 10,
                        "user_id": 3,
                        "active": true
                      }
                    ],
                    "entries": 1,
                    "timestamp": 1724759082131
                  }

    put:
      tags:
        - Data
        - Cardholder Sites
      summary: Update object for cardholder site
      operationId: updateCardholderSite
      x-tag-permissions:
        - users
        - cardholders
        - sites
        - cardholders_sites
      requestBody:
        required: true
        content:
          'application/json':
            schema:
              type: object
              additionalProperties: false
              properties:
                site_id:
                  type: integer
                cardholder_id:
                  type: integer
                user_id:
                  type: integer
                active:
                  type: boolean
      responses:
        '401':
          description: Authorization information is missing or invalid.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedResponse"
        '400':
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        '200':
          description: Returns an array of "cardholder site" items updated by query
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/CardholdersSitesResponse"
                example:
                  {
                    "success": true,
                    "data": [
                      {
                        "id": 1,
                        "site_id": 3,
                        "cardholder_id": 10,
                        "user_id": 3,
                        "active": true
                      }
                    ],
                    "entries": 1,
                    "timestamp": 1724759082131
                  }
    delete:
      tags:
        - Data
        - Cardholder Sites
      operationId: deleteCardholderSite
      x-tag-permissions:
        - users
        - cardholders
        - sites
        - cardholders_sites
      summary: Delete object for cardholders sites
      responses:
        '401':
          description: Authorization information is missing or invalid.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedResponse"
        '400':
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/DeleteResponse"
              example:
                {
                  "success": true,
                  "data": "Successfully deleted record(s). [1]",
                  "timestamp": 1723108298846
                }
          description: Returns result of delete
    parameters:
      - $ref: "#/components/parameters/idParam"
      - $ref: "#/components/parameters/limitParam"
      - $ref: "#/components/parameters/offsetParam"
      - $ref: "#/components/parameters/orderParam"
      - $ref: "#/components/parameters/countParam"
      - $ref: "#/components/parameters/others"
      - $ref: "#/components/parameters/smallerThanParam"
      - $ref: "#/components/parameters/greaterThanParam"
      - $ref: "#/components/parameters/smallerThanEqualParam"
      - $ref: "#/components/parameters/greaterThanEqualParam"

  '/cardholders_products':
    post:
      tags:
        - Data
        - Cardholder Products
      summary: Create object for provider
      description: |-
        Links Card to one or many Products
      operationId: createCardholderProduct
      x-tag-permissions:
        - cardholders_products
        - products
        - cardholders
        - users
      requestBody:
        required: true
        content:
          'application/json':
            schema:
              type: object
              additionalProperties: false
              properties:
                cardholder_id:
                  type: integer
                product_id:
                  type: integer
                balance:
                  type: integer
                  description: Balance available to the card holder for this product
                restock_flag:
                  type: boolean
                  description: Should this product balance be automatically reset to the `take_limit` value at month end
                unlimited:
                  type: boolean
                  description: If set, there is no limit to how many can be consumed
                take_limit:
                  type: integer
                  description: The maximum amount that can be consumed
                  example: 10
                user_id:
                  type: integer
                active:
                  type: boolean
              required: [ "cardholder_id", "product_id", "user_id", "active" ]
      responses:
        '401':
          description: Authorization information is missing or invalid.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedResponse"
        '400':
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        '200':
          description: Returns cardholder product created by query
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/CardholdersProductsResponse"
                example:
                  {
                    "success": true,
                    "data": [
                      {
                        "id": 1,
                        "balance": 10,
                        "restock_flag": true,
                        "unlimited": true,
                        "active": true,
                        "take_limit": 2,
                        "qr_code": "PAYWAY|3|5|Desription|AA43|Store 1|true",
                        "users": {
                          "id": 1,
                          "username": "Testing User"
                        },
                        "products": {
                          "id": 1,
                          "description": "testing",
                          "product_code": "JIM001",
                          "sap_code": "testing",
                          "location": "testing",
                          "active": true
                        },
                        "cardholders": {
                          "id": 1,
                          "first_name": "Testing",
                          "last_name": "Testing",
                          "card_no": "V60357926"
                        }
                      }
                    ],
                    "entries": 1,
                    "timestamp": 1724759082131
                  }

  '/cardholders_products/{id}':
    get:
      tags:
        - Data
        - Cardholder Products
      operationId: getCardholderProduct
      x-tag-permissions:
        - cardholders_products
        - products
        - cardholders
        - users
      summary: Get object for cardholder product
      responses:
        '401':
          description: Authorization information is missing or invalid.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedResponse"
        '400':
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        '200':
          description: Returns an array of "cardholder product" items from the database
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/CardholdersProductsResponse"
                example:
                  {
                    "success": true,
                    "data": [
                      {
                        "id": 1,
                        "balance": 10,
                        "restock_flag": true,
                        "unlimited": true,
                        "active": true,
                        "take_limit": 2,
                        "qr_code": "PAYWAY|3|5|Desription|AA43|Store 1|true",
                        "users": {
                          "id": 1,
                          "username": "Testing User"
                        },
                        "products": {
                          "id": 1,
                          "description": "testing",
                          "product_code": "JIM001",
                          "sap_code": "testing",
                          "location": "testing",
                          "active": true
                        },
                        "cardholders": {
                          "id": 1,
                          "first_name": "Testing",
                          "last_name": "Testing",
                          "card_no": "V60357926"
                        }
                      }
                    ],
                    "entries": 1,
                    "timestamp": 1724759082131
                  }
    put:
      tags:
        - Data
        - Cardholder Products
      summary: Update object for cardholder product
      operationId: updateCardholderProduct
      x-tag-permissions:
        - cardholders_products
        - products
        - cardholders
        - users
      requestBody:
        required: true
        content:
          'application/json':
            schema:
              type: object
              additionalProperties: false
              properties:
                cardholder_id:
                  type: integer
                product_id:
                  type: integer
                balance:
                  type: integer
                  description: Balance available to the card holder for this product
                restock_flag:
                  type: boolean
                  description: Should this product balance be automatically reset to the `take_limit` value at month end
                unlimited:
                  type: boolean
                  description: If set, there is no limit to how many can be consumed
                take_limit:
                  type: integer
                  description: The maximum amount that can be consumed
                  example: 10
                user_id:
                  type: integer
                active:
                  type: boolean
      responses:
        '401':
          description: Authorization information is missing or invalid.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedResponse"
        '400':
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        '200':
          description: Returns an array of "cardholder product" items updated by query
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/CardholdersProductsResponse"
                example:
                  {
                    "success": true,
                    "data": [
                      {
                        "id": 1,
                        "balance": 10,
                        "restock_flag": true,
                        "unlimited": true,
                        "active": true,
                        "take_limit": 2,
                        "qr_code": "PAYWAY|3|5|Desription|AA43|Store 1|true",
                        "users": {
                          "id": 1,
                          "username": "Testing User"
                        },
                        "products": {
                          "id": 1,
                          "description": "testing",
                          "product_code": "JIM001",
                          "sap_code": "testing",
                          "location": "testing",
                          "active": true
                        },
                        "cardholders": {
                          "id": 1,
                          "first_name": "Testing",
                          "last_name": "Testing",
                          "card_no": "V60357926"
                        }
                      }
                    ],
                    "entries": 1,
                    "timestamp": 1724759082131
                  }
    delete:
      tags:
        - Data
        - Cardholder Products
      operationId: deleteCardholderProduct
      x-tag-permissions:
        - cardholders_products
        - products
        - cardholders
        - users
      summary: Delete object for cardholders products
      responses:
        '401':
          description: Authorization information is missing or invalid.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedResponse"
        '400':
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/DeleteResponse"
              example:
                {
                  "success": true,
                  "data": "Successfully deleted record(s). [1]",
                  "timestamp": 1723108298846
                }
          description: Returns result of delete
    parameters:
      - $ref: "#/components/parameters/idParam"
      - $ref: "#/components/parameters/limitParam"
      - $ref: "#/components/parameters/offsetParam"
      - $ref: "#/components/parameters/orderParam"
      - $ref: "#/components/parameters/countParam"
      - $ref: "#/components/parameters/others"
      - $ref: "#/components/parameters/smallerThanParam"
      - $ref: "#/components/parameters/greaterThanParam"
      - $ref: "#/components/parameters/smallerThanEqualParam"
      - $ref: "#/components/parameters/greaterThanEqualParam"

  '/cardholders':
    post:
      tags:
        - Data
        - Cardholders
      summary: Create object for cardholders
      description: |-
        Card Holders are identified as Mifare cards.  Each card is identified by a unique `card_no` that
        can be read out of the card using the correct Mifare card reader/NFC reader.
      operationId: createCardholder
      x-tag-permissions:
        - cardholders
        - users
        - sites
      requestBody:
        required: true
        content:
          'application/json':
            schema:
              type: object
              additionalProperties: false
              properties:
                user_id:
                  type: integer
                card_no:
                  type: string
                  description: The unique UUID for the card
                  example: ab34ef16aa
                  maxLength: 45
                first_name:
                  type: string
                  maxLength: 45
                last_name:
                  type: string
                  maxLength: 45
                user_number:
                  type: string
                  description: A student number, employee number or similar
                  example: STU001
                  maxLength: 45
                contact_number:
                  type: string
                  maxLength: 20
                  example: '+27876545611'
                  pattern: ^((\+|\d)[0-9]{1,16})?$
                  minLength: 0
                negative_credit_allowed:
                  type: boolean
                  description: If set, the card wallet balance will be allowed to go into negative credits
                throttle_multiple_requests:
                  type: boolean
                  description: |-
                    If set (default), multiple requests for the card at the same POS terminal will be throttled to prevent
                    "double-tapping".
                balance_accumulate:
                  type: boolean
                  description: At the end of each month, card wallet balances are re-calculated.  If this is set, then
                    any un-used credits are included in the calculation.
                cost_centre:
                  type: string
                  description: For reporting purposes.  Cards can be allocated to various Cost Centres
                  example: STUDENT, MAINTENANCE
                  maxLength: 45
                topup_value:
                  type: number
                  description: This is the amount the will be either added to the wallet balance, if balance_accumulate is set,
                    or the value that will be used to set the wallet balance at month end.
                  minimum: 0
                topup_reoccurrence:
                  type: boolean
                  description: If set, the card wallet will automatically be reset on month end in accordance with the rules set
                    above.
                wallet:
                  type: number
                  description: MiFare wallet credit amount.
                link_sites:
                  type: boolean
                  description: When we create this cardholder, should we automatically link them in the cardholder_sites table?
                sites:
                  type: array
                  description: Array of sites that the cardholder should be linked to. Linking table "cardholders_sites".
                  properties:
                    items:
                      type: integer
                active:
                  type: boolean
              required: [ "user_id", "card_no", "active" ]
      responses:
        '401':
          description: Authorization information is missing or invalid.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedResponse"
        '400':
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        '200':
          description: Returns cardholder object created by query
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/CardholdersResponse"
                example:
                  {
                    "success": true,
                    "data": [
                      {
                        "id": 1,
                        "card_no": "123555",
                        "first_name": "Testing",
                        "last_name": "Name",
                        "user_number": "12343",
                        "contact_number": "+27854561288",
                        "negative_credit_allowed": true,
                        "throttle_multiple_requests": true,
                        "balance_accumulate": true,
                        "cost_centre": "testing",
                        "wallet": "0.00",
                        "topup_value": "10.00",
                        "topup_reoccurrence": false,
                        "topup_date": null,
                        "topup_amount": null,
                        "last_transaction_device_uid": null,
                        "last_transaction_timestamp": null,
                        "import_site_id": null,
                        "import_guid": null,
                        "created_at": "2024-08-27T10:44:03.542Z",
                        "updated_at": "2024-08-27T10:44:03.542Z",
                        "last_transaction_result": null,
                        "active": true,
                        "users": {
                          "id": 1,
                          "username": "Test User"
                        },
                        "sites": {
                          "id": [
                            1,
                            12
                          ],
                          "name": [
                            "Site A",
                            "Site B"
                          ]
                        }
                      }
                    ],
                    "entries": 1,
                    "timestamp": 1724759082131
                  }

  '/cardholders/{id}':
    get:
      tags:
        - Data
        - Cardholders
      operationId: getCardholder
      x-tag-permissions:
        - cardholders
        - users
        - sites
      summary: Get object for cardholder
      responses:
        '401':
          description: Authorization information is missing or invalid.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedResponse"
        '400':
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        '200':
          description: Returns an array of "cardholder" items from the database
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/CardholdersResponse"
                example:
                  {
                    "success": true,
                    "data": [
                      {
                        "id": 1,
                        "card_no": "123555",
                        "first_name": "Testing",
                        "last_name": "Name",
                        "user_number": "12343",
                        "contact_number": "+27854561288",
                        "negative_credit_allowed": true,
                        "throttle_multiple_requests": true,
                        "balance_accumulate": true,
                        "cost_centre": "testing",
                        "wallet": "0.00",
                        "topup_value": "10.00",
                        "topup_reoccurrence": false,
                        "topup_date": null,
                        "topup_amount": null,
                        "last_transaction_device_uid": null,
                        "last_transaction_timestamp": null,
                        "import_site_id": null,
                        "import_guid": null,
                        "created_at": "2024-08-27T10:44:03.542Z",
                        "updated_at": "2024-08-27T10:44:03.542Z",
                        "last_transaction_result": null,
                        "active": true,
                        "users": {
                          "id": 1,
                          "username": "Test User"
                        },
                        "sites": {
                          "id": [
                            1,
                            12
                          ],
                          "name": [
                            "Site A",
                            "Site B"
                          ]
                        }
                      }
                    ],
                    "entries": 1,
                    "timestamp": 1724759082131
                  }
    put:
      tags:
        - Data
        - Cardholders
      summary: Update object for cardholder
      operationId: updateCardholder
      x-tag-permissions:
        - cardholders
        - users
        - sites
        - products
      requestBody:
        required: true
        content:
          'application/json':
            schema:
              type: object
              additionalProperties: false
              properties:
                user_id:
                  type: integer
                card_no:
                  type: string
                  description: The unique UUID for the card
                  example: ab34ef16aa
                  maxLength: 45
                first_name:
                  type: string
                  maxLength: 45
                last_name:
                  type: string
                  maxLength: 45
                user_number:
                  type: string
                  description: A student number, employee number or similar
                  example: STU001
                  maxLength: 45
                contact_number:
                  type: string
                  maxLength: 20
                  example: '+27876545611'
                  pattern: ^((\+|\d)[0-9]{1,16})?$
                  minLength: 0
                negative_credit_allowed:
                  type: boolean
                  description: If set, the card wallet balance will be allowed to go into negative credits
                throttle_multiple_requests:
                  type: boolean
                  description: |-
                    If set (default), multiple requests for the card at the same POS terminal will be throttled to prevent
                    "double-tapping".
                balance_accumulate:
                  type: boolean
                  description: At the end of each month, card wallet balances are re-calculated.  If this is set, then
                    any un-used credits are included in the calculation.
                cost_centre:
                  type: string
                  description: For reporting purposes.  Cards can be allocated to various Cost Centres
                  example: STUDENT, MAINTENANCE
                  maxLength: 45
                topup_value:
                  type: number
                  description: This is the amount the will be either added to the wallet balance, if balance_accumulate is set,
                    or the value that will be used to set the wallet balance at month end.
                  minimum: 0
                topup_reoccurrence:
                  type: boolean
                  description: If set, the card wallet will automatically be reset on month end in accordance with the rules set
                    above.
                sites:
                  type: array
                  description: Array of sites that the cardholder should be linked to. Linking table "cardholders_sites".
                  properties:
                    items:
                      type: integer
                active:
                  type: boolean
      responses:
        '401':
          description: Authorization information is missing or invalid.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedResponse"
        '400':
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        '200':
          description: List of cardholder objects
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/CardholdersResponse"
                example:
                  {
                    "success": true,
                    "data": [
                      {
                        "id": 1,
                        "card_no": "123555",
                        "first_name": "Testing",
                        "last_name": "Name",
                        "user_number": "12343",
                        "contact_number": "+27854561288",
                        "negative_credit_allowed": true,
                        "throttle_multiple_requests": true,
                        "balance_accumulate": true,
                        "cost_centre": "testing",
                        "wallet": "0.00",
                        "topup_value": "10.00",
                        "topup_reoccurrence": false,
                        "topup_date": null,
                        "topup_amount": null,
                        "last_transaction_device_uid": null,
                        "last_transaction_timestamp": null,
                        "import_site_id": null,
                        "import_guid": null,
                        "created_at": "2024-08-27T10:44:03.542Z",
                        "updated_at": "2024-08-27T10:44:03.542Z",
                        "last_transaction_result": null,
                        "active": true,
                        "users": {
                          "id": 1,
                          "username": "Test User"
                        },
                        "sites": {
                          "id": [
                            1,
                            12
                          ],
                          "name": [
                            "Site A",
                            "Site B"
                          ]
                        }
                      }
                    ],
                    "entries": 1,
                    "timestamp": 1724759082131
                  }
    delete:
      tags:
        - Data
        - Cardholders
      operationId: deleteCardholder
      x-tag-permissions:
        - cardholders
      summary: Delete object for cardholder
      responses:
        '401':
          description: Authorization information is missing or invalid.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedResponse"
        '400':
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/DeleteResponse"
              example:
                {
                  "success": true,
                  "data": "Successfully deleted record(s). [1]",
                  "timestamp": 1723108298846
                }
          description: Returns result of delete
    parameters:
      - $ref: "#/components/parameters/idParam"
      - $ref: "#/components/parameters/limitParam"
      - $ref: "#/components/parameters/offsetParam"
      - $ref: "#/components/parameters/orderParam"
      - $ref: "#/components/parameters/countParam"
      - $ref: "#/components/parameters/others"
      - $ref: "#/components/parameters/smallerThanParam"
      - $ref: "#/components/parameters/greaterThanParam"
      - $ref: "#/components/parameters/smallerThanEqualParam"
      - $ref: "#/components/parameters/greaterThanEqualParam"

  '/cardholders/topup':
    put:
      tags:
        - Functions
        - Cardholders
      summary: Topup cardholder balance
      description: |-
        This endpoint is used to add balance to cardholders. This will create a log/audit trail inside the mifare transactions table.

      operationId: updateTopupCardholder
      x-tag-permissions:
        - cardholders
        - sites
      requestBody:
        required: true
        content:
          'application/json':
            schema:
              oneOf:
                - type: object
                - type: array
                  items:
                    type: object
              additionalProperties: false
              properties:
                cardholder_id:
                  type: integer
                  example: 4
                card_no:
                  type: string
                  example: 'aab637a'
                  maxLength: 45
                amount:
                  oneOf:
                    - type: string
                    - type: number
                  description: Amount to be added to balance in full currency, not cents.
                  example: 5.50
                type:
                  type: string
                  enum: [ "debit", "credit" ]
              required: [ "amount", "type" ]
      responses:
        '401':
          description: Authorization information is missing or invalid.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedResponse"
        '400':
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        '200':
          description: List of cardholder topup objects
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/CardholdersTopupResponse"
                example:
                  {
                    "success": true,
                    "data": [
                      {
                        "cardholder_id": 1,
                        "amount": 5.5,
                        "wallet": 10.00,
                        "type": "credit",
                        "success": true
                      }
                    ],
                    "entries": 1,
                    "total_count": null,
                    "timestamp": 1724759082131
                  }

  '/cardholders/products/{id}':
    get:
      tags:
        - Data
        - Cardholders
      operationId: getCardholderProductByCardholder
      x-tag-permissions:
        - cardholders
        - products
      summary: Get product object for cardholder
      responses:
        '401':
          description: Authorization information is missing or invalid.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedResponse"
        '400':
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        '200':
          description: Returns an array of "cardholder" items from the database
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/CardholdersProductsDetailsResponse"
                example:
                  {
                    "success": true,
                    "data": [
                      {
                        "id": 1,
                        "card_no": "123555",
                        "first_name": "Testing",
                        "last_name": "Name",
                        "user_number": "12343",
                        "contact_number": "+27854561288",
                        "negative_credit_allowed": true,
                        "throttle_multiple_requests": true,
                        "balance_accumulate": true,
                        "cost_centre": "testing",
                        "wallet": "0.00",
                        "topup_value": "10.00",
                        "topup_reoccurrence": false,
                        "topup_date": null,
                        "topup_amount": null,
                        "last_transaction_device_uid": null,
                        "last_transaction_timestamp": null,
                        "import_site_id": null,
                        "import_guid": null,
                        "created_at": "2024-08-27T10:44:03.542Z",
                        "updated_at": "2024-08-27T10:44:03.542Z",
                        "last_transaction_result": null,
                        "active": true,
                        "products": {
                          "id": [
                            1,
                            2
                          ],
                          "description": [
                            "Product A",
                            "Product B"
                          ],
                          "product_code": [
                            "P1001",
                            "P2002"
                          ]
                        },
                        "cardholders_products": {
                          "id": [
                            1,
                            2
                          ],
                          "balance": [
                            10,
                            5
                          ],
                          "take_limit": [
                            2,
                            10
                          ],
                          "unlimited": [
                            true,
                            true
                          ],
                          "restock_flag": [
                            true,
                            true
                          ],
                          "active": [
                            true,
                            true
                          ]
                        }
                      }
                    ],
                    "entries": 1,
                    "timestamp": 1724759082131
                  }
    parameters:
      - $ref: "#/components/parameters/idParam"
      - $ref: "#/components/parameters/limitParam"
      - $ref: "#/components/parameters/offsetParam"
      - $ref: "#/components/parameters/orderParam"
      - $ref: "#/components/parameters/countParam"
      - $ref: "#/components/parameters/others"
      - $ref: "#/components/parameters/smallerThanParam"
      - $ref: "#/components/parameters/greaterThanParam"
      - $ref: "#/components/parameters/smallerThanEqualParam"
      - $ref: "#/components/parameters/greaterThanEqualParam"

  '/activity_logs/{id}':
    get:
      tags:
        - Data
        - Logs
      operationId: getActivityLogs
      x-tag-permissions:
        - users
      summary: Get object for activity logs
      description: |-
        This endpoint holds all activity logs for PUT, POST and DELETE endpoints.
        This acts as a audit trail to understand what actions have been performed by users.

      responses:
        '401':
          description: Authorization information is missing or invalid.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedResponse"
        '400':
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        '200':
          description: Returns an array of "activity logs" items from the database
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ActivityLogsResponse"
                example:
                  {
                    "success": true,
                    "data": [
                      {
                        "id": 1,
                        "timestamp": "2024-09-06T05:06:37.709Z",
                        "action": "POST",
                        "operation_id": "createUserAccess",
                        "body": "{\"user_id\":125,\"access_id\":104}",
                        "parameters": "{}",
                        "username": "Test Account",
                        "users": {
                          "id": 1,
                          "username": "Test Account",
                          "super_user": true
                        }
                      }
                    ],
                    "entries": 1,
                    "timestamp": 1723628631562
                  }

    parameters:
      - $ref: "#/components/parameters/idParam"
      - $ref: "#/components/parameters/limitParam"
      - $ref: "#/components/parameters/offsetParam"
      - $ref: "#/components/parameters/orderParam"
      - $ref: "#/components/parameters/countParam"
      - $ref: "#/components/parameters/others"

  '/authentication':
    post:
      tags:
        - Data
        - Authentication
      summary: Authenticate as a cardholder
      description: |-
        This endpoint is used to get an x-user-token for cardholders for integrations and API access.
      operationId: createAuthentication
      requestBody:
        required: true
        content:
          'application/json':
            schema:
              type: object
              additionalProperties: false
              properties:
                card_no:
                  type: string
                  example: "67ab8a"
              required: [ "card_no" ]
      responses:
        '401':
          description: Authorization information is missing or invalid.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedResponse"
        '400':
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        '200':
          description: Returns cardholder product created by query
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/AuthenticationResponse"
                example:
                  {
                    "success": true,
                    "data": {
                      "token": "bba1b051a1na051bc7d0b205012164269f"
                    },
                    "total_count": null,
                    "timestamp": 1723628631562
                  }

  '/devices/activate':
    post:
      tags:
        - Functions
        - Devices
      summary: Activate device remotely
      description: |-
        Devices are physical WiFi or SIM based modems used to connect physical hardware to the Payway system. Using this endpoint,
        you can activate any device your card has access to.

      operationId: activateDevices
      requestBody:
        required: true
        content:
          'application/json':
            schema:
              oneOf:
                - type: array
                  items:
                    type: object
                - type: object
              additionalProperties: false
              properties:
                device_uid:
                  type: string
                card_no:
                  type: string
                  description: The unique UUID for the card found in the MiFare system. Only used if "payment_service_provider" = mifare.
                  example: ab34ef16aa
                  maxLength: 45
                amount:
                  type: number
                  minimum: 0
                  description: The amount of currency the activation is going to use in whole numbers, not cents. The devices coupon price is used and the amount is ignored.
              required: [ "device_uid", "card_no" ]
      responses:
        '401':
          description: Authorization information is missing or invalid.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedResponse"
        '400':
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        '200':
          description: Returns device object created by query
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/DevicesActivateResponse"
                example:
                  {
                    "success": true,
                    "data": [
                      {
                        "device_id": 1,
                        "reason": "Webhook call successful. [Notification Successfully published]",
                        "success": true
                      }
                    ],
                    "entries": 1,
                    "total_count": null,
                    "timestamp": 1723108298846
                  }

components:
  securitySchemes:
    XUserToken:
      type: apiKey
      in: header
      name: x-user-token
  schemas:
    UserResponse:
      type: object
      properties:
        id:
          type: integer
        username:
          type: string
        token:
          type: string
          description: x-user-token used in all endpoints.
        created_at:
          type: string
        super_admin:
          type: boolean
        active:
          type: boolean
    TransactionResponse:
      type: object
      properties:
        id:
          type: integer
        tx_id:
          type: string
          description: Unique transaction identifier
        full_name:
          type: string
          description: Full name associated to the card
        card_no:
          type: string
          description: The unique card number/UUID
        user_number:
          type: string
          description: The user number associated to the card
        action:
          type: string
          description: Transaction type, eg Credit, Debit, etc.
        wallet:
          type: number
          description: Wallet balance before the transaction completed
        amount:
          type: number
          description: The amount added or removed from the card wallet balance
        balance:
          type: number
          description: The new card wallet balance after the transaction completed
        channel:
          type: string
          description: If used in a vending application, the channel that the product was dispensed from
        stock_level:
          type: integer
          description: If used in a vending application, the remaining stock level
        timestamp:
          type: integer
          description: Timestamp of the transaction
        result:
          type: string
          description: Final result of the transaction, eg. DR, CR, BN
        agent:
          type: string
          description: Unique Identifier of the agent (or machine)
        agent_name:
          type: string
          description: Human readable name associated with the agent
        payment_reference_1:
          type: integer
          description: The unique transaction identifier
        payment_reference_2:
          type: integer
          description: Custom payment reference or used to cross-reference if a refund transaction
        seq_key:
          type: string
          description: Unique sequence identifier to prevent duplication at POS
        created_at:
          type: integer
    SitesResponse:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        address:
          type: string
        location:
          type: string
          description: Extra level of physical location identification can be used here.
        active:
          type: boolean
        users:
          type: object
          properties:
            id:
              type: integer
            username:
              type: string
    ProductsResponse:
      type: object
      properties:
        id:
          type: integer
        description:
          type: string
          description: Product description
        product_code:
          type: string
          description: Product code
        sap_code:
          type: string
          description: SAP Product Code
        location:
          type: string
          description: Physical location of product
        active:
          type: boolean
        users:
          type: object
          properties:
            id:
              type: integer
            username:
              type: string
    CardholdersSitesResponse:
      type: object
      properties:
        id:
          type: integer
        site_id:
          type: integer
        cardholder_id:
          type: integer
        user_id:
          type: integer
        active:
          type: boolean
    CardholdersProductsResponse:
      type: object
      properties:
        id:
          type: integer
        balance:
          type: integer
        restock_flag:
          type: boolean
        unlimited:
          type: boolean
        take_limit:
          type: integer
        active:
          type: boolean
        users:
          type: object
          properties:
            id:
              type: integer
            username:
              type: string
        products:
          type: object
          properties:
            id:
              type: integer
            description:
              type: string
            product_code:
              type: string
            sap_code:
              type: string
            location:
              type: string
            qr_code:
              type: string
            active:
              type: boolean
        cardholders:
          type: object
          properties:
            id:
              type: integer
            first_name:
              type: string
            last_name:
              type: string
            card_no:
              type: string
    CardholdersResponse:
      type: object
      properties:
        id:
          type: integer
        card_no:
          type: string
        first_name:
          type: string
        last_name:
          type: string
        user_number:
          type: string
        contact_number:
          type: string
        negative_credit_allowed:
          type: boolean
        throttle_multiple_requests:
          type: boolean
        balance_accumulate:
          type: boolean
        cost_centre:
          type: string
        wallet:
          type: number
        topup_value:
          type: number
        topup_reoccurrence:
          type: boolean
        topup_date:
          type: string
        topup_amount:
          type: number
        last_transaction_device_uid:
          type: string
        last_transaction_timestamp:
          type: string
        last_transaction_result:
          type: string
        import_site_id:
          type: integer
        import_guid:
          type: string
        created_at:
          type: string
        updated_at:
          type: string
        active:
          type: boolean
        users:
          type: object
          properties:
            id:
              type: integer
            username:
              type: string
        sites:
          type: object
          properties:
            id:
              type: array
              items:
                type: integer
            name:
              type: array
              items:
                type: string
    CardholdersTopupResponse:
      type: object
      properties:
        cardholder_id:
          type: integer
        amount:
          type: number
        wallet:
          type: number
          description: Wallet amount after applied action.
        type:
          type: string
        success:
          type: boolean
    CardholdersProductsDetailsResponse:
      type: object
      properties:
        id:
          type: integer
        card_no:
          type: string
        first_name:
          type: string
        last_name:
          type: string
        user_number:
          type: string
        contact_number:
          type: string
        negative_credit_allowed:
          type: boolean
        throttle_multiple_requests:
          type: boolean
        balance_accumulate:
          type: boolean
        cost_centre:
          type: string
        wallet:
          type: number
        topup_value:
          type: number
        topup_reoccurrence:
          type: boolean
        topup_date:
          type: string
        topup_amount:
          type: number
        last_transaction_device_uid:
          type: string
        last_transaction_timestamp:
          type: string
        last_transaction_result:
          type: string
        import_site_id:
          type: integer
        import_guid:
          type: string
        created_at:
          type: string
        updated_at:
          type: string
        active:
          type: boolean
        products:
          type: object
          properties:
            id:
              type: array
              items:
                type: integer
            description:
              type: array
              items:
                type: string
            product_code:
              type: array
              items:
                type: string
        cardholders_products:
          type: object
          properties:
            balance:
              type: array
              items:
                type: integer
            take_limit:
              type: array
              items:
                type: integer
            unlimited:
              type: array
              items:
                type: boolean
            restock_flag:
              type: array
              items:
                type: boolean
            active:
              type: array
              items:
                type: boolean
    ActivityLogsResponse:
      type: object
      properties:
        id:
          type: integer
        timestamp:
          type: string
        action:
          type: string
          description: HTTP request type.
        operation_id:
          type: string
          description: OpenAPI operation / path identifier.
        body:
          type: string
          description: All contents of the requests body.
        parameters:
          type: string
          description: All query parameters of the request.
        username:
          type: string
          description: Name of user account that performed action. Useful for historical data.
        users:
          type: object
          properties:
            id:
              type: integer
            username:
              type: string
            super_user:
              type: boolean
    AuthenticationResponse:
      type: object
      properties:
        token:
          type: string
          example: 67aa89b
    DevicesActivateResponse:
      type: object
      properties:
        device_uid:
          type: integer
        reason:
          type: string
        success:
          type: boolean

    DeleteResponse:
      type: object
      properties:
        success:
          type: boolean
        data:
          type: string
        timestamp:
          type: string

    # Status codes
    ValidationFailResponse:
      type: object
      properties:
        err:
          type: string
      example:
        {
          "err": [
            {
              "instancePath": "/requestBody",
              "schemaPath": "#/properties/requestBody/additionalProperties",
              "keyword": "additionalProperties",
              "params": {
                "additionalProperty": "emulation_id"
              },
              "message": "must NOT have additional properties"
            }
          ]
        }
    AccountNotActiveResponse:
      type: object
      properties:
        err:
          type: string
          description: User has been deactivated.
      example:
        {
          "err": "Account is not active. [John Doe]"
        }
    AccountPasswordResetResponse:
      type: object
      properties:
        err:
          type: string
          description: User needs to reset their password before being allowed login access again.
      example:
        {
          "err": "Please reset password before login. [John Doe]"
        }
    UnauthorizedResponse:
      type: object
      properties:
        success:
          type: boolean
        error:
          type: string
          description: Error returned by backend.
        details:
          type: string
          description: Any extra information around the error.
        type:
          type: string
          description: Type of error encountered.
        timestamp:
          type: string
      example:
        {
          "success": false,
          "error": "Account not found or setup correctly.",
          "details": "x-user-token: undefined",
          "type": "internal",
          "timestamp": 1723108298846
        }
    ErrorResponse:
      type: object
      properties:
        success:
          type: boolean
        error:
          type: string
          description: Error returned by backend.
        details:
          type: string
          description: Any extra information around the error.
        type:
          type: string
          description: Type of error encountered.
        timestamp:
          type: string
      example:
        {
          "success": false,
          "error": "insert or update on table \"asset_states\" violates foreign key constraint \"asset_states_resellers_id_fk\"",
          "details": null,
          "type": "internal",
          "timestamp": 1723108298846
        }

    numberIndex:
      type: string
      pattern: '[0-9]$'
    selectAll:
      type: string
      enum:
        - _all

  parameters:
    idParam:
      in: path
      name: id
      required: true
      schema:
        oneOf:
          - $ref: "#/components/schemas/numberIndex"
          - $ref: "#/components/schemas/selectAll"
      examples:
        id:
          value: 12
          summary: Search by specific primary key aka "id".
        all:
          value: '_all'
          summary: Search by all accessible objects.
    idSingleParam:
      in: path
      name: id
      required: true
      schema:
        allOf:
          - $ref: "#/components/schemas/numberIndex"
      examples:
        id:
          value: 12
          summary: Search by specific primary key aka "id".
    tokenParam:
      in: path
      name: id
      required: true
      schema:
        allOf:
          - type: string
            pattern: ^[a-z A-Z-0-9]+
      examples:
        token:
          value: "7ecc242c-c40d-4fd1-ba02-62220b4t8c6b"
          summary: Search by user token.

    offsetParam:
      in: query
      name: offset
      required: false
      schema:
        type: integer
        minimum: 0
      example: 1

    limitParam:
      in: query
      name: limit
      required: false
      schema:
        type: integer
        minimum: 0
      example: 3

    orderParam:
      in: query
      name: order_by
      required: false
      schema:
        anyOf:
          - type: string
            pattern: ^[A-Za-z\._]+:(asc|desc)$
          - type: array
            items:
              type: string
              pattern: ^[A-Za-z\._]+:(asc|desc)$
      examples:
        asc:
          value: "field:asc"
          summary: Filters the field specific by ascending order.
        desc:
          value: "field:desc"
          summary: Filters the field specific by descending order.
    smallerThanParam:
      in: query
      name: st
      required: false
      schema:
        anyOf:
          - type: string
            anyOf:
              - pattern: ^[\w.]+:([+-]?([0-9]*[.])?[0-9]+)$
              - pattern: ^[\w.]+:\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}$
              - pattern: ^[\w.]+:\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}[+-|%20]\d{2}:\d{2}
          - type: array
            items:
              anyOf:
                - type: string
                  pattern: ^[\w.]+:([+-]?([0-9]*[.])?[0-9]+)$
                - type: string
                  pattern: ^[\w.]+:\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}$
                - type: string
                  pattern: ^[\w.]+:((?:(\d{4}-\d{2}-\d{2})T(\d{2}:\d{2}:\d{2}(?:\.\d+)?))(Z|[\+-]\d{2}:\d{2})?)$
      examples:
        smallerThan:
          value: "field_name:100"
          summary: Filters the field smaller than provided number.
        smallerThanDate:
          value: "field_name:2024-04-10 00:00:00"
          summary: Filters the field smaller than the provided date.
        greaterThanDate:
          value: "field_name:2024-10-09T12:21:26+05:30"
          summary: Filters the field smaller than the provided date with timestamp.
    greaterThanParam:
      in: query
      name: gt
      required: false
      schema:
        anyOf:
          - type: string
            anyOf:
              - pattern: ^[\w.]+:([+-]?([0-9]*[.])?[0-9]+)$
              - pattern: ^[\w.]+:\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}$
              - pattern: ^[\w.]+:\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}[+-|%20]\d{2}:\d{2}
          - type: array
            items:
              anyOf:
                - type: string
                  pattern: ^[\w.]+:([+-]?([0-9]*[.])?[0-9]+)$
                - type: string
                  pattern: ^[\w.]+:\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}$
                - type: string
                  pattern: ^[\w.]+:((?:(\d{4}-\d{2}-\d{2})T(\d{2}:\d{2}:\d{2}(?:\.\d+)?))(Z|[\+-]\d{2}:\d{2})?)$
      examples:
        greaterThanEqual:
          value: "field_name:100"
          summary: Filters the field greater than provided number.
        greaterThanEqualDate:
          value: "field_name:2024-04-10 00:00:00"
          summary: Filters the field greater than the provided date.
        greaterThanDate:
          value: "field_name:2024-10-09T12:21:26+05:30"
          summary: Filters the field smaller than the provided date with timestamp.
    smallerThanEqualParam:
      in: query
      name: ste
      required: false
      schema:
        anyOf:
          - type: string
            anyOf:
              - pattern: ^[\w.]+:([+-]?([0-9]*[.])?[0-9]+)$
              - pattern: ^[\w.]+:\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}$
              - pattern: ^[\w.]+:\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}[+-|%20]\d{2}:\d{2}
          - type: array
            items:
              anyOf:
                - type: string
                  pattern: ^[\w.]+:([+-]?([0-9]*[.])?[0-9]+)$
                - type: string
                  pattern: ^[\w.]+:\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}$
                - type: string
                  pattern: ^[\w.]+:((?:(\d{4}-\d{2}-\d{2})T(\d{2}:\d{2}:\d{2}(?:\.\d+)?))(Z|[\+-]\d{2}:\d{2})?)$
      examples:
        smallerThanEqual:
          value: "field_name:100"
          summary: Filters the field smaller than and equal to provided number.
        smallerThanEqualDate:
          value: "field_name:2024-04-10 00:00:00"
          summary: Filters the field smaller than and equal to the provided date.
        greaterThanDate:
          value: "field_name:2024-10-09T12:21:26+05:30"
          summary: Filters the field smaller than the provided date with timestamp.
    greaterThanEqualParam:
      in: query
      name: gte
      required: false
      schema:
        anyOf:
          - type: string
            anyOf:
              - pattern: ^[\w.]+:([+-]?([0-9]*[.])?[0-9]+)$
              - pattern: ^[\w.]+:\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}$
              - pattern: ^[\w.]+:\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}[+-|%20]\d{2}:\d{2}
          - type: array
            items:
              anyOf:
                - type: string
                  pattern: ^[\w.]+:([+-]?([0-9]*[.])?[0-9]+)$
                - type: string
                  pattern: ^[\w.]+:\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}$
                - type: string
                  pattern: ^[\w.]+:((?:(\d{4}-\d{2}-\d{2})T(\d{2}:\d{2}:\d{2}(?:\.\d+)?))(Z|[\+-]\d{2}:\d{2})?)$
      examples:
        smallerThanEqual:
          value: "field_name:100"
          summary: Filters the field greater than and equal to provided number.
        smallerThanEqualDate:
          value: "field_name:2024-04-10 00:00:00"
          summary: Filters the field greater than and equal to the provided date.
        greaterThanDate:
          value: "field_name:2024-10-09T12:21:26+05:30"
          summary: Filters the field smaller than the provided date with timestamp.

    countParam:
      in: query
      name: count_entries
      required: false
      schema:
        type: boolean
      example: true

    others:
      in: query
      name: field_name
      schema:
        additionalProperties: true
      examples:
        textContaining:
          value: "%Store%"
          summary: Searches in specific field for text containing the word "Store".
        textStart:
          value: "Store%"
          summary: Searches in specific field for text starting with the word "Store".
        textEnd:
          value: "%Store"
          summary: Searches in specific field for text ending with the word "Store".
        textFind:
          value: "Store"
          summary: Searches in specific field for text equaling to "Store".
        numberFind:
          value: 108
          summary: Searches in specific field for number equaling to "108".
        dateFind:
          value: "2024-08-01 00:00:00"
          summary: Searches in specific field for date equaling to "2024-08-01 00:00:00".
        multipleParam:
          value: "1,2,10"
          summary: Searches in specific field for 1 OR 2 OR 10.

security:
  - XUserToken: [ ]
