openapi: 3.0.1

info:
  x-logo:
    url: "https://i.imgur.com/YI6VLQx.png"
    backgroundColor: "#f9f8f1"
    altText: "IQ Telemetry"


  title: Payway API v1
  description: |-
    
    Payway Backend API for all administrative functions and reporting. 
    If you wish to access this api, please contact us with the desired endpoints and reason.
    
    NOTE: Access restricted, logged, rate limited API.
  

  contact:
    name: Ryan Pomario
    email: ryan@iqt.co.za

  version: 1.0.3

externalDocs:
  description: Click here to learn more about Payway.
  url: https://payway.iqt.co.za

tags:
  - name: Data
    description: Endpoints that interact with data via the database.
  - name: Functions
    description: Endpoints that perform functions relating to the database.

  - name: Token
    description: Endpoints that allow you to authenticate with the API.
  - name: Users
    description: Endpoints that allow you to control Payway users.
  - name: Users Access
    description: Endpoints that allow you to control Payway users access.
  - name: Roles
    description: Endpoints that allow you to control roles.
  - name: Users Roles
    description: Endpoints that allow you to control user roles.
  - name: Levels
    description: Endpoints that relate to levels in the business logic of Payway.
  - name: Other Business Logic
    description: Endpoints that relate to other business logic.
  - name: Logs
    description: Endpoints that relate to viewing logs in the Payway backend.
  - name: Resellers Organisations
    description: Endpoints that relate to reseller organisation, many to many, linking tables.
  - name: Companies Providers
    description: Endpoints that relate to companies providers, one to many, linking tables.
  - name: Connectivity History
    description: Endpoints that relate to connectivity history.
  - name: Transactions
    description: Endpoints that relate to transactions / payments.
  - name: Refunds
    description: Endpoints that relate to refunds for transactions / payments.
  - name: Device Activity Audit
    description: Endpoints that relate to auditing or logging actions.
  - name: Customers
    description: Endpoints that relate to customers.
  - name: Password Reset
    description: Endpoints that relate to resetting users password.
  - name: Access
    description: Endpoints that relate to user access.
  - name: Reseller
    description: Endpoints that relate to reseller level.
  - name: Organisations
    description: Endpoints that relate to organisation level.
  - name: Companies
    description: Endpoints that relate to company level.
  - name: Sites
    description: Endpoints that relate to site level.
  - name: Device
    description: Endpoints that relate to device level.
  - name: Asset States
    description: Endpoints that relate to asset states.
  - name: Emulations
    description: Endpoints that relate to emulation.
  - name: Host Hardware
    description: Endpoints that relate to host hardware.
  - name: Pos Types
    description: Endpoints that relate to pos types.
  - name: Providers
    description: Endpoints that relate to providers.
  - name: Status Codes
    description: Endpoints that relate to status codes.
  - name: Bookings
    description: Endpoints that relate to bookings.
  - name: Notifications
    description: Endpoints that relate to application notification centers.


x-tagGroups:
  - name: Access Controls & User Management
    tags:
      - Access
      - Users Access
      - Roles
      - Users Roles
      - Users
      - Customers
      - Password Reset
  - name: Authentication
    tags:
      - Token
  - name: Platform Configurations and Administration
    tags:
      - Asset States
      - Emulations
      - Host Hardware
      - Pos Types
      - Providers
      - Status Codes

  - name: Hierarchical Platform Structure
    tags:
      - Resellers
      - Organisations
      - Companies
      - Sites
      - Devices

  - name: Cross-Table Linking
    tags:
      - Resellers Organisations
      - Companies Providers

  - name: Reporting and Logging
    tags:
      - Connectivity History
      - Device Activity Audit
      - Logs
      - Transactions
      - Refunds
      - Bookings
      - Notifications


servers:
  - url: '{scheme}://payway.iqt.co.za/{version}/api'
    variables:
      scheme:
        description: 'The API is accessible via https.'
        enum:
          - 'https'
        default: 'https'
      version:
        description: 'The API version.'
        enum:
          - 'v1'
        default: 'v1'

paths:
  '/authentication':
    post:
      security:
        - { }
      tags:
        - Functions
        - Token
      summary: Obtain x-user-token for auth
      description: |-
        This endpoint is used to retrieve an authentication token that is used to identify a Payway user.
        We call this token the "x-user-token", a randomly generated string representing a user. 
        This token does not expire after a set time period. On every successful authentication a new token is generated, expiring the old one.
        This end-point handles both Firebase (Email and Password) and Google Login methods. 
        
        **It is important you store this session token in a secure way as tokens do not expire.**
        
        Returned with the user object, the users access and roles are accessible as well.
        Please reference the API documentation for access and role logic.

      operationId: authentication
      requestBody:
        required: true
        content:
          'application/json':
            schema:
              type: object
              additionalProperties: false
              properties:
                client_email:
                  type: string
                  pattern: '^(([^+<>()[\]\\.,;:\s@"]+(\.[^<>()[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$'
                  example: 'test@iqt.co.za'
                  maxLength: 320
                  description: Email needs to be working otherwise Firebase verification will not work.
                client_secret:
                  type: string
                  example: 'AET68Eh$WE7'
                  maxLength: 100
                  description: Client secret, or password, is provided by Firebase when a user is created. Not found in our database.
                authority:
                  type: string
                  enum: [ "firebase", "google" ]
              required: [ "client_email", "client_secret", "authority" ]
      responses:
        '200':
          description: Returns authenticated users object
          content:
            application/json:
              schema:
                type: array
                items:
                  - $ref: "#/components/schemas/AuthenticationResponse"
                  - $ref: "#/components/schemas/AccessResponse"
                  - $ref: "#/components/schemas/RolesResponse"
                example:
                  {
                    "success": true,
                    "data": {
                      "user": [
                        {
                          "id": 1,
                          "token": "7ecc242c-c40d-4fd1-ba02-62220b4t8c6b",
                          "contact_number": "+27834567123",
                          "currency": "R",
                          "delimiter": ";",
                          "displayname": "Ryan Pomario",
                          "email": "ryan@iqt.co.za",
                          "email_verified": true,
                          "firebase_id": "Reu8oIQWf898E4K1hIJdPpKIpOe93",
                          "google_id": "null",
                          "sidebar_toggled": false,
                          "password_reset": true,
                          "active": true
                        }
                      ],
                      "access": [
                        {
                          "id": 1,
                          "name": "Create Access",
                          "operation_id": "createAccess",
                          "can_access": true
                        }
                      ],
                      "roles": [
                        {
                          "id": 5,
                          "reseller_id": 1,
                          "organisation_id": 7,
                          "company_id_list": [
                            "2",
                            "3"
                          ],
                          "site_id_list": [ ],
                          "device_id_list": [ ],
                          "is_reseller": false,
                          "name": "New Role"
                        }
                      ]
                    },
                    "timestamp": 1725523937144
                  }

  '/authentication/reset-password':
    post:
      security:
        - { }
      tags:
        - Functions
        - Password Reset
      summary: Request password reset for user account
      description: |-
        This endpoint is used to request a password reset for a firebase user account.
        Users must complete their password reset email for any effect on their login details to occur. If not completed,
        their password will remain the same.

      operationId: resetPassword
      requestBody:
        required: true
        content:
          'application/json':
            schema:
              type: object
              additionalProperties: false
              properties:
                client_email:
                  type: string
                  pattern: '^(([^+<>()[\]\\.,;:\s@"]+(\.[^<>()[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$'
                  example: 'test@iqt.co.za'
                  description: Email needs to be working otherwise Firebase reset email will not work.
                  maxLength: 320
                authority:
                  type: string
                  enum: [ "firebase" ]
              required: [ "client_email", "authority" ]
      responses:
        '200':
          description: Returns status of password reset attempt
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PasswordResetResponse"
              example:
                {
                  "success": true,
                  "data": "Password reset link sent to user with email ryan@iqt.co.za",
                  "timestamp": 1723108298846
                }


  '/access':
    post:
      tags:
        - Data
        - Access
      summary: Create object for operation id / endpoint
      description: |-
        This endpoint is used to create access objects that define properties of endpoints. e.g. /users
        The primary key returned on successful creation, or known as the "id", can be used to allow a user to access certain endpoints. This is done via the "User Access" resource.
        This table is populated and maintained by the system maintainers and should have an entry for each non-public OpenAPI definition end-point. This table joined
        with the users_access and users table can determine front-end visible menu items based on the user specific access controls.
        
        If a user encounters the message: **"Unauthorized. [${operationId}]"**, they most likely do not have an access entry linked to their account.
        All access to endpoints is denied by default, expect for a few select around user authentication.

      operationId: createAccess
      requestBody:
        required: true
        content:
          'application/json':
            schema:
              type: object
              additionalProperties: false
              properties:
                name:
                  type: string
                  example: 'Allow Deleting Customers'
                  maxLength: 100
                operation_id:
                  type: string
                  example: 'deleteCustomers'
                  maxLength: 100
                  description: |-
                    Operation ids are plain text representations of the open-api resources, e.g deleteCustomers.
                    These values can be found in the OpenAPI spec, and are defined under every endpoint type.
                can_access:
                  type: boolean
              required: [ "name", "operation_id", "can_access" ]
      responses:
        '200':
          description: Returns access object created by query
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/AccessResponse"
              example:
                {
                  "success": true,
                  "data": [
                    {
                      "id": 1,
                      "name": "Delete Customers",
                      "operation_id": "deleteCustomers",
                      "can_access": true
                    }
                  ],
                  "entries": 1,
                  "timestamp": 1723108298846
                }

  '/access/{id}':
    get:
      tags:
        - Data
        - Access
      summary: Get object for operation id / endpoint
      operationId: getAccess
      responses:
        '200':
          description: Obtain an array of "access" items from the database
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/AccessResponse"
                example:
                  {
                    "success": true,
                    "data": [
                      {
                        "id": 85,
                        "name": "Update Device Activity Audit",
                        "operation_id": "updateDeviceActivityAudit",
                        "can_access": true
                      }
                    ],
                    "entries": 1,
                    "timestamp": 1723108298846
                  }
    put:
      tags:
        - Data
        - Access
      summary: Update object for operation id / endpoint
      description: Update properties of an access object
      operationId: updateAccess
      requestBody:
        required: true
        content:
          'application/json':
            schema:
              type: object
              additionalProperties: false
              properties:
                name:
                  type: string
                  example: 'User Deleting Customers'
                  maxLength: 100
                operation_id:
                  type: string
                  example: 'deleteCustomers'
                  maxLength: 100
                  description: |-
                    Operation ids are plain text representations of the open-api resources, e.g deleteCustomers.
                    These values can be found in the OpenAPI spec, and are defined under every endpoint type.
                can_access:
                  type: boolean
      responses:
        '200':
          description: Returns an array of "access" items updated by query
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/AccessResponse"
    delete:
      tags:
        - Data
        - Access
      summary: Delete object for operation id / endpoint
      operationId: deleteAccess
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
                example:
                  {
                    "success": true,
                    "data": "Successfully deleted record(s). [1]",
                    "timestamp": 1723108298846
                  }
          description: Returns result of delete

    parameters:
      - $ref: "#/components/parameters/idParam"
      - $ref: "#/components/parameters/limitParam"
      - $ref: "#/components/parameters/offsetParam"
      - $ref: "#/components/parameters/orderParam"
      - $ref: "#/components/parameters/countParam"
      - $ref: "#/components/parameters/others"


  '/roles':
    post:
      tags:
        - Data
        - Roles
      summary: Create object for roles
      description: |-
        This endpoint is used to create roles that are linked to users. These roles define which reseller and organisation users are linked to.
        A user may only belong to one Reseller and Organisation, and the Organisation must be a direct descendant of the Reseller.  A User may
        be linked to many Roles, and as such, we must ensure that the Reseller and Organisation are the same across all linked Roles.  A change
        in this rule will lead to unexpected behaviour.
        
        If the "is_reseller" flag is set in any of the Roles linked to the User, only the Reseller will be used to determine which siblings in
        the Reseller - Organisation - Company - Site - Device and other related resource will be accessible.  Note that only one Role needs this
        "is_reseller" flag to be set for this behaviour to be enforced.  This flag is set only for Users that are Resellers such that the User 
        may view and manage any resource belonging to any Organisation under their control.
        
        If a User is granted "super_admin" status, then roles are no longer in effect and total system wide visibility is permitted.  
        This status is granted only by direct database changes by the development squad. 
        (See Users endpoint details for more information on this)
        
        The Role also permits finer resource controls by defining which Companies, Sites and Devices may be accessible by the User-Role
        relationship.  Companies, Sites and Devices are defined by arrays of ids. An empty array is created by default. When the array is empty,
        all Companies, Sites and Devices which are direct descendants of the Organisation are visible. If you would like to restrict the roles 
        access to certain resources, append the relevant resources id to the array. This will restrict the role to ONLY the defined ids found 
        in those non-empty arrays.
        
        e.g: 
        * site_id_list: [] ---- results in ALL sites under organisation being accessible
        * site_id_list: [3, 1] ---- results in only sites with ID 3 and 1 being accessible
        
        Users are linked to Roles via the Users_Roles service.  When onboarding a new Organisation, the Primary User account created for the 
        Organisation will be created using either a Super Admin or Reseller User account. This primary User account should be allocated a Role,
        such that each Organisation will have at least one Primary Role that permits full visibility of all resources that are direct descendants.    
        This will allow for the organisation's Primary User to create subsequent User accounts and Roles only in relation to the resources that 
        are direct descendants.  

      operationId: createRoles
      requestBody:
        required: true
        content:
          'application/json':
            schema:
              type: object
              additionalProperties: false
              properties:
                name:
                  type: string
                  example: 'Reseller role'
                  maxLength: 50
                reseller_id:
                  type: integer
                organisation_id:
                  type: integer
                company_id_list:
                  type: array
                  items:
                    type: integer
                  example: [ 9, 1, 5 ]
                  description: If array is empty, access to all companies linked to user. If not empty, only defined companies in array are accessible by user.
                site_id_list:
                  type: array
                  items:
                    type: integer
                  example: [ 7, 1 ]
                  description: If array is empty, access to all sites linked to user. If not empty, only defined sites in array are accessible by user.
                device_id_list:
                  type: array
                  items:
                    type: integer
                  example: [ 8, 9, 12, 477, 322 ]
                  description: If array is empty, access to all devices linked to user. If not empty, only defined devices in array are accessible by user.
                is_reseller:
                  type: boolean
                  description: If role is set to reseller, this role will have access to all resources under the reseller. Similar to a "super-user" account.
              required: [ "name", "reseller_id","organisation_id" ]
              example:
                {
                  "name": "New Role",
                  "reseller_id": 1,
                  "organisation_id": 10,
                  "company_id_list": [ 1,2 ],
                  "site_id_list": [ 1,2 ],
                  "device_id_list": [ ],
                  "is_reseller": false
                }

      responses:
        '200':
          description: Returns role object created by query
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/RolesResponse"
                example:
                  {
                    "success": true,
                    "data": [
                      {
                        "id": 7,
                        "name": "New Role",
                        "company_id_list": [ ],
                        "device_id_list": [ 1, 2, 10, 3 ],
                        "organisation_id": 10,
                        "reseller_id": 1,
                        "site_id_list": [ ],
                        "is_reseller": false,
                      }
                    ],
                    "entries": 1,
                    "timestamp": 1723108298846
                  }

  '/roles/{id}':
    get:
      tags:
        - Data
        - Roles
      operationId: getRoles
      summary: Get object for roles
      responses:
        '200':
          description: Returns an array of "role" items from the database
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/RolesResponse"
                example:
                  {
                    "success": true,
                    "data": [
                      {
                        "id": 7,
                        "name": "New Role",
                        "company_id_list": [ ],
                        "device_id_list": [ 1, 2, 10, 3 ],
                        "organisation_id": 10,
                        "reseller_id": 1,
                        "site_id_list": [ ],
                        "is_reseller": false

                      }
                    ],
                    "entries": 1,
                    "timestamp": 1723108298846
                  }

    put:
      tags:
        - Data
        - Roles
      summary: Update object for roles
      operationId: updateRoles
      requestBody:
        required: true
        content:
          'application/json':
            schema:
              type: object
              additionalProperties: false
              properties:
                name:
                  type: string
                  example: 'Updated Reseller role'
                  maxLength: 50
                reseller_id:
                  type: integer
                organisation_id:
                  type: integer
                company_id_list:
                  type: array
                  items:
                    type: integer
                  example: [ 9, 1, 5 ]
                  description: If array is empty, access to all companies linked to user. If not empty, only defined companies in array are accessible by user.
                site_id_list:
                  type: array
                  items:
                    type: integer
                  example: [ 7 ]
                  description: If array is empty, access to all sites linked to user. If not empty, only defined sites in array are accessible by user.
                device_id_list:
                  type: array
                  items:
                    type: integer
                  example: [ ]
                  description: If array is empty, access to all devices linked to user. If not empty, only defined devices in array are accessible by user.
                is_reseller:
                  type: boolean
                  description: If role is set to reseller, this role will have access to all resources under the reseller. Similar to a "super-user" account.
      responses:
        '200':
          description: Returns an array of "role" items updated by query
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/RolesResponse"
                example:
                  {
                    "success": true,
                    "data": [
                      {
                        "id": 7,
                        "name": "Updated Role",
                        "company_id_list": [ ],
                        "device_id_list": [ 1, 2, 10, 3 ],
                        "organisation_id": 10,
                        "reseller_id": 1,
                        "site_id_list": [ ],
                        "is_reseller": false

                      }
                    ],
                    "entries": 1,
                    "timestamp": 1723108298846
                  }
    delete:
      tags:
        - Data
        - Roles
      summary: Delete object for roles
      operationId: deleteRoles
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
                example:
                  {
                    "success": true,
                    "data": "Successfully deleted record(s). [1]",
                    "timestamp": 1723108298846
                  }
          description: Returns result of delete
    parameters:
      - $ref: "#/components/parameters/idParam"
      - $ref: "#/components/parameters/limitParam"
      - $ref: "#/components/parameters/offsetParam"
      - $ref: "#/components/parameters/orderParam"
      - $ref: "#/components/parameters/countParam"
      - $ref: "#/components/parameters/others"

  '/users':
    post:
      tags:
        - Data
        - Users
      summary: Create object for Payway user
      description: |-
        Users are the main, and only way, to "access" resources in the API Backend. 
        Every user is linked to a Reseller and Organisation. As a user, you only have the ability to access resources 
        defined by the Access and Roles rules for the particular User, unless the "super_user" flag is set, in which case you
        have system wide access. 
        
        When a new user is created, a "client secret" or "password" is randomly generated and the "password_reset" flag is set.
        On first login of the User Account, if the "password_reset" flag is set, the User must be prompted to set a new
        password.  The password should not be the same as the email account used and must be at least:
        * 10 characters long
        * 2 upper case characters
        * One special character 
        * Two numerical characters 
        * Three lowercase characters.
        
        If the password is not updated, the user will not be able to access any resources other than the endpoints required to update their
        password.  **On update of the password, be sure to reset the "password_reset" flag.** 
        
        Every user that has been successfully authenticated will receive an "x-user-token".
        This token is a randomly generated unique string that identifies a user account.
        These tokens do not expire, but do get refreshed on a new successful authentication request. 
        This means that only ONE active "session" can exist. e.g The user account can only be used on one device at a time.
        
        Super admin users have the highest access level. These accounts get access to all resources in the API. No matter
        the reseller or organisation. 
        
        Proxy users (or service accounts) are NOT to be used by user facing websites or mobile applications. 
        Proxy users are meant to be used by applications that require restricted access to API resources. 
        Proxy users act like normal users, having the same access and role based controls.

      operationId: createUsers
      requestBody:
        required: true
        content:
          'application/json':
            schema:
              type: object
              additionalProperties: false
              properties:
                displayname:
                  type: string
                  example: John Doe
                  maxLength: 50
                  pattern: ^[a-z A-Z]+
                email:
                  type: string
                  example: 'john.doe@gmail.com'
                  maxLength: 320
                  pattern: '^(([^+<>()[\]\\.,;:\s@"]+(\.[^<>()[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$'
                email_verified:
                  type: boolean
                contact_number:
                  type: string
                  example: '+27876545611'
                  maxLength: 20
                  pattern: ^(\+|\d)[0-9]{7,16}$
                currency:
                  type: string
                  example: "$"
                  maxLength: 5
                  pattern: ^[A-Z$€]*$
                  description: Defines the type of current a user is using.
                delimiter:
                  type: string
                  example: ';'
                  maxLength: 1
                  pattern: ^[;]*$
                proxy_user:
                  type: boolean
                  description: Special user that should only be used in certain cases.
                active:
                  type: boolean
              required: [ "displayname", "email", "currency", "delimiter" ]
      responses:
        '200':
          description: Returns user object created by query
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/UsersResponse"
                example:
                  {
                    "success": true,
                    "data": [
                      {
                        "id": 1,
                        "displayname": "John Doe",
                        "email": "john.doe@gmai.com",
                        "email_verified": true,
                        "contact_number": "+27653451232",
                        "last_login_at": null,
                        "active": true,
                        "google_id": null,
                        "token": null,
                        "last_login_error": null,
                        "sidebar_toggled": false,
                        "firebase_id": "B9lQQzlzED5JOcdP8Jc399Jk1CA2",
                        "currency": "R",
                        "delimiter": ";",
                        "super_admin": false,
                        "proxy_user": false,
                        "password_reset": true,
                        "password": "ns98Ui7T2Sc"
                      }
                    ],
                    "entries": 1,
                    "timestamp": 1723108298846
                  }

  '/users/{id}':
    get:
      tags:
        - Data
        - Users
      operationId: getUsers
      summary: Get object for user
      responses:
        '200':
          description: Returns an array of "user" items from the database
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/UsersResponse"
                example:
                  {
                    "success": true,
                    "data": [
                      {
                        "id": 1,
                        "contact_number": "+278249563295",
                        "email": "test@iqt.co.za",
                        "email_verified": true,
                        "last_login_at": "2024-08-13T09:08:29.000Z",
                        "last_login_error": "success",
                        "currency": "R",
                        "delimiter": ";",
                        "displayname": "Test IQT",
                        "sidebar_toggled": false,
                        "firebase_id": "B8vGoIQWfaN74K78HEdPpT9hpX93",
                        "proxy_user": false,
                        "super_admin": true,
                        "password_reset": true,
                        "active": true
                      }
                    ],
                    "entries": 1,
                    "timestamp": 1723108298846
                  }
    put:
      tags:
        - Data
        - Users
      summary: Update object for users
      operationId: updateUsers
      requestBody:
        required: true
        content:
          'application/json':
            schema:
              type: object
              additionalProperties: false
              properties:
                displayname:
                  type: string
                  example: John Doe
                  maxLength: 50
                  pattern: ^[a-z A-Z]+
                email:
                  type: string
                  maxLength: 320
                  example: 'john.doe@gmail.com'
                  pattern: '^(([^+<>()[\]\\.,;:\s@"]+(\.[^<>()[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$'
                email_verified:
                  type: boolean
                contact_number:
                  type: string
                  example: '+27876545611'
                  maxLength: 20
                  pattern: ^(\+|\d)[0-9]{7,16}$
                currency:
                  type: string
                  example: "$"
                  maxLength: 5
                  pattern: ^[A-Z$€]*$
                  description: Defines the type of current a user is using.
                delimiter:
                  type: string
                  example: ';'
                  maxLength: 1
                  pattern: ^[;]*$
                proxy_user:
                  type: boolean
                  description: Special user that should only be used in certain cases.
                password_reset:
                  type: boolean
                  description: Define if password reset required.
                password:
                  type: string
                  description: New password provided by user.
                active:
                  type: boolean
      responses:
        '200':
          description: Returns an array of "user" items updated by query
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/UsersResponse"
              example:
                {
                  "success": true,
                  "data": [
                    {
                      "id": 1,
                      "displayname": "IQT Test",
                      "email": "test@iqt.co.za",
                      "email_verified": true,
                      "contact_number": "+27624574394",
                      "last_login_at": "2024-06-06T08:06:21.000Z",
                      "active": true,
                      "google_id": null,
                      "token": "null",
                      "last_login_error": "Error: Email verification is required before this user can fully authenticate. An email has been sent to ryantest@iqt.co.za",
                      "sidebar_toggled": false,
                      "firebase_id": "Z7AyWWTA9iSUd8KIOV2YfrjlFT4O2",
                      "currency": "R",
                      "delimiter": ";",
                      "super_admin": false,
                      "password_reset": true,
                      "proxy_user": false
                    }
                  ],
                  "entries": 1,
                  "timestamp": 1723108298846
                }
    delete:
      tags:
        - Data
        - Users
      summary: Delete object for users
      operationId: deleteUsers
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/DeleteResponse"
              example:
                {
                  "success": true,
                  "data": "Successfully deleted record(s). [1]",
                  "timestamp": 1723108298846
                }
          description: Returns result of delete
    parameters:
      - $ref: "#/components/parameters/idParam"
      - $ref: "#/components/parameters/limitParam"
      - $ref: "#/components/parameters/offsetParam"
      - $ref: "#/components/parameters/orderParam"
      - $ref: "#/components/parameters/countParam"
      - $ref: "#/components/parameters/others"


  '/user_access':
    post:
      tags:
        - Data
        - Users Access
      summary: Create object for user access
      description: |-
        By default users are not able to access any resources, like /sites, until given specific permission to do so.
        This table acts as a link to the access and user table. If a user does not have permissions to access a HTTP/s 
        resource, this is the place to give them access.

      operationId: createUserAccess
      requestBody:
        required: true
        content:
          'application/json':
            schema:
              type: object
              additionalProperties: false
              properties:
                user_id:
                  type: integer
                  example: 1
                  description: Users ID can be found in the users resource.
                access_id:
                  type: integer
                  example: 3
                  description: Access ID can be found in the access resource.
              required: [ "user_id", "access_id" ]
      responses:
        '200':
          description: Returns user access object created by query
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/UserAccessResponse"
                example:
                  {
                    "success": true,
                    "data": [
                      {
                        "id": 1,
                        "user_id": 1,
                        "access_id": 3
                      }
                    ],
                    "entries": 1,
                    "timestamp": 1723108298846
                  }

  '/user_access/user/{id}':
    get:
      tags:
        - Data
        - Users Access
      summary: Get object for user access by a user id
      operationId: getUserAccessDetailByUserId
      responses:
        '200':
          description: Returns an array of "user access" items from the database
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/UserAccessDetailResponse"
                example:
                  {
                    "success": true,
                    "data": [
                      {
                        "id": 1,
                        "access_id": 1,
                        "name": "Create Access",
                        "operation_id": "createAccess",
                        "can_access": true
                      }
                    ],
                    "entries": 1,
                    "timestamp": 1723108298846
                  }
    parameters:
      - $ref: "#/components/parameters/idParam"

  '/user_access/{id}':
    get:
      tags:
        - Data
        - Users Access
      summary: Get object for user access
      operationId: getUserAccess
      responses:
        '200':
          description: Returns an array of "user access" items from the database
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/UserAccessResponse"
                example:
                  {
                    "success": true,
                    "data": [
                      {
                        "id": 1,
                        "access_id": 77,
                        "user_id": 1
                      }
                    ],
                    "entries": 1,
                    "timestamp": 1723108298846
                  }
    delete:
      tags:
        - Data
        - Users Access
      operationId: deleteUserAccess
      summary: Delete object for user access
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/DeleteResponse"
              example:
                {
                  "success": true,
                  "data": "Successfully deleted record(s). [1]",
                  "timestamp": 1723108298846
                }
          description: Returns result of delete
    parameters:
      - $ref: "#/components/parameters/idParam"
      - $ref: "#/components/parameters/limitParam"
      - $ref: "#/components/parameters/offsetParam"
      - $ref: "#/components/parameters/orderParam"
      - $ref: "#/components/parameters/countParam"
      - $ref: "#/components/parameters/others"

  '/user_roles':
    post:
      tags:
        - Data
        - Users Roles
      summary: Create object for user roles
      description: |-
        This endpoint is used as a linking table.
        This tables relation is: 
        * MANY-Users-to-MANY-Roles.

      operationId: createUserRoles
      requestBody:
        required: true
        content:
          'application/json':
            schema:
              type: object
              additionalProperties: false
              properties:
                user_id:
                  type: integer
                  example: 1
                  description: Users ID can be found in the users resource.
                role_id:
                  type: integer
                  example: 3
                  description: Roles ID can be found in the roles resource.
              required: [ "user_id", "role_id" ]
      responses:
        '200':
          description: Returns user roles object created by query
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/UserRolesResponse"
                example:
                  {
                    "success": true,
                    "data": [
                      {
                        "id": 2,
                        "role_id": 1,
                        "user_id": 100
                      }
                    ],
                    "entries": 1,
                    "timestamp": 1723108298846
                  }

  '/user_roles/{id}':
    get:
      tags:
        - Data
        - Users Roles
      operationId: getUserRoles
      summary: Get object for user roles
      responses:
        '200':
          description: Returns an array of "user roles" items from the database
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/UserRolesResponse"
                example:
                  {
                    "success": true,
                    "data": [
                      {
                        "id": 2,
                        "role_id": 1,
                        "user_id": 100
                      }
                    ],
                    "entries": 1,
                    "timestamp": 1723108298846
                  }

    delete:
      tags:
        - Data
        - Users Roles
      operationId: deleteUserRoles
      summary: Delete object for user roles
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/DeleteResponse"
              example:
                {
                  "success": true,
                  "data": "Successfully deleted record(s). [1]",
                  "timestamp": 1723108298846
                }
          description: Returns result of delete
    parameters:
      - $ref: "#/components/parameters/idParam"
      - $ref: "#/components/parameters/limitParam"
      - $ref: "#/components/parameters/offsetParam"
      - $ref: "#/components/parameters/orderParam"
      - $ref: "#/components/parameters/countParam"
      - $ref: "#/components/parameters/others"

  '/user_roles/user/{id}':
    get:
      tags:
        - Data
        - Users Roles
      operationId: getUserRolesByUserId
      summary: Get object for user roles by user id
      responses:
        '200':
          description: Returns an array of "user roles" items from the database
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/UserRolesResponse"
                example:
                  {
                    "success": true,
                    "data": [
                      {
                        "id": 2,
                        "role_id": 1,
                        "user_id": 100
                      }
                    ],
                    "entries": 1,
                    "timestamp": 1723108298846
                  }
    parameters:
      - $ref: "#/components/parameters/idParam"
      - $ref: "#/components/parameters/limitParam"
      - $ref: "#/components/parameters/offsetParam"
      - $ref: "#/components/parameters/orderParam"
      - $ref: "#/components/parameters/countParam"
      - $ref: "#/components/parameters/others"

  '/customers':
    post:
      tags:
        - Data
        - Customers
      summary: Create object for customer
      description: |-
        This endpoint manages a second type of user in Payway called customers.
        Customers are not direct users of the Payway system, but rather consumers of features and services. e.g Walk in store customer, a student, etc.
        
        Customers are primarily used for the booking system.
        Customers are linked to a Payway proxy user, service account. This ensures access is restricted to the correct organisation and resources
        in terms of the Access and Roles Based rules of the service account.

      operationId: createCustomers
      requestBody:
        required: true
        content:
          'application/json':
            schema:
              type: object
              additionalProperties: false
              properties:
                first_name:
                  type: string
                  maxLength: 100
                  example: "John"
                last_name:
                  type: string
                  maxLength: 100
                  example: "Doe"
                customer_identification:
                  type: string
                  maxLength: 30
                  example: "0456744907613"
                email:
                  type: string
                  maxLength: 100
                  pattern: '^(([^+<>()[\]\\.,;:\s@"]+(\.[^<>()[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$'
                contact_number:
                  type: string
                  example: '+27876545611'
                  maxLength: 20
                  pattern: ^(\+|\d)[0-9]{7,16}$
                consent_number:
                  type: boolean
                consent_email:
                  type: boolean
                user_id:
                  type: integer
                  example: 105
                  description: The id of the proxy user (service account).
                blocked:
                  type: boolean
                  description: Prevents user from accessing the API.
                daily_booking_limit:
                  type: integer
                  example: 5
                  description: The total number of bookings a user can make in one day.
                verified:
                  type: boolean
                  description: Has the user verified their email?
                email_sent_amount:
                  type: integer
                  example: 5
                  description: Amount of times a login request has been sent.
              required: [ "first_name", "last_name", "email", "user_id" ]
      responses:
        '200':
          description: Returns customer object created by query
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/CustomersResponse"
                example:
                  {
                    "success": true,
                    "data": [
                      {
                        "id": 1,
                        "email": "john.doe@gmail.com",
                        "first_name": "John",
                        "last_name": "Doe",
                        "contact_number": "+27876545611",
                        "customer_identification": "0456744907613",
                        "user_id": 125,
                        "consent_number": true,
                        "consent_email": true,
                        "daily_booking_limit": 5,
                        "blocked": false,
                        "verified": true,
                        "email_sent_amount": 4
                      }
                    ],
                    "entries": 1,
                    "timestamp": 1723108298846
                  }

  '/customers/{id}':
    get:
      tags:
        - Data
        - Customers
      summary: Get object for customers
      operationId: getCustomers
      responses:
        '200':
          description: Returns an array of "customer" items from the database
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/CustomersResponse"
                example:
                  {
                    "success": true,
                    "data": [
                      {
                        "id": 1,
                        "email": "john.doe@gmail.com",
                        "first_name": "John",
                        "last_name": "Doe",
                        "contact_number": "+27876545611",
                        "customer_identification": "0456744907613",
                        "user_id": 125,
                        "consent_number": true,
                        "consent_email": true,
                        "daily_booking_limit": 5,
                        "blocked": false,
                        "verified": true,
                        "email_sent_amount": 4
                      }
                    ],
                    "entries": 1,
                    "timestamp": 1723108298846
                  }
    put:
      tags:
        - Data
        - Customers
      summary: Update object for customers
      operationId: updateCustomers
      requestBody:
        required: true
        content:
          'application/json':
            schema:
              type: object
              additionalProperties: false
              properties:
                first_name:
                  type: string
                  maxLength: 100
                  example: "John"
                last_name:
                  type: string
                  maxLength: 100
                  example: "Doe"
                customer_identification:
                  type: string
                  maxLength: 30
                  example: "0456744907613"
                email:
                  type: string
                  maxLength: 100
                  pattern: '^(([^+<>()[\]\\.,;:\s@"]+(\.[^<>()[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$'
                contact_number:
                  type: string
                  example: '+27876545611'
                  maxLength: 20
                  pattern: ^(\+|\d)[0-9]{7,16}$
                consent_number:
                  type: boolean
                consent_email:
                  type: boolean
                user_id:
                  type: integer
                  example: 105
                  description: Customer needs to be linked to a user, usually a proxy user, for access control.
                blocked:
                  type: boolean
                  description: Prevents user from accessing the API.
                daily_booking_limit:
                  type: integer
                  example: 5
                  description: The total number of bookings a user can make in one day.
                verified:
                  type: boolean
                  description: Has the user verified their email?
                email_sent_amount:
                  type: integer
                  example: 5
                  description: Amount of times a login request has been sent.
      responses:
        '200':
          description: Returns an array of "customer" items updated by query
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/CustomersResponse"
                example:
                  {
                    "success": true,
                    "data": [
                      {
                        "id": 1,
                        "email": "john.doe@gmail.com",
                        "first_name": "John",
                        "last_name": "Doe",
                        "contact_number": "+27876545611",
                        "customer_identification": "0456744907613",
                        "user_id": 125,
                        "consent_number": true,
                        "consent_email": true,
                        "daily_booking_limit": 5,
                        "blocked": false,
                        "verified": true,
                        "email_sent_amount": 4
                      }
                    ],
                    "entries": 1,
                    "timestamp": 1723108298846
                  }
    delete:
      tags:
        - Data
        - Customers
      operationId: deleteCustomers
      summary: Delete object for customers
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/DeleteResponse"
              example:
                {
                  "success": true,
                  "data": "Successfully deleted record(s). [1]",
                  "timestamp": 1723108298846
                }
          description: Returns result of delete

    parameters:
      - $ref: "#/components/parameters/idParam"
      - $ref: "#/components/parameters/limitParam"
      - $ref: "#/components/parameters/offsetParam"
      - $ref: "#/components/parameters/orderParam"
      - $ref: "#/components/parameters/countParam"
      - $ref: "#/components/parameters/others"


  '/resellers':
    post:
      tags:
        - Data
        - Resellers
      summary: Create object for reseller
      description: |-
        Resellers are customers that re-sell the Payway system to their own customers / consumers. 
        Resellers are of the highest level in the Payway system. **Resellers may have MANY Organisations.**

      operationId: createResellers
      requestBody:
        required: true
        content:
          'application/json':
            schema:
              type: object
              additionalProperties: false
              properties:
                name:
                  type: string
                  example: "BigTech Reseller"
                  maxLength: 60
                  pattern: ^[a-z A-Z]+
                address:
                  type: string
                  example: "109 BigTech Street, Cape Town 8800"
                  maxLength: 100
                contact_number:
                  type: string
                  example: '+27876545611'
                  maxLength: 20
                  pattern: ^(\+|\d)[0-9]{7,16}$
                contact_person:
                  type: string
                  example: "John Doe"
                  maxLength: 50
                  pattern: ^[a-z A-Z]+
                lat_lng:
                  type: string
                  maxLength: 50
                  example: "-18.08011,-34.73830"
                  pattern: '^[-+]?([1-8]?\d(\.\d+)?|90(\.0+)?),\s*[-+]?(180(\.0+)?|((1[0-7]\d)|([1-9]?\d))(\.\d+)?)$'
                active:
                  type: boolean
              required: [ "name","address", "contact_number", "contact_person", "lat_lng", "active" ]
      responses:
        '200':
          description: Returns reseller object created by query
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ResellersResponse"
                example:
                  {
                    "success": true,
                    "data": [
                      {
                        "id": 1,
                        "name": "New Reseller",
                        "address": "3336 Zebra Road, Cape Town 8800",
                        "contact_number": "+2712795494",
                        "contact_person": "John Doe",
                        "lat_lng": "-18.08011,-34.73830",
                        "active": true
                      }
                    ],
                    "entries": 1,
                    "timestamp": 1723628631562
                  }

  '/resellers/{id}':
    get:
      tags:
        - Data
        - Resellers
      operationId: getResellers
      summary: Get object for resellers
      responses:
        '200':
          description: Returns an array of "reseller" items from the database
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ResellersResponse"
                example:
                  {
                    "success": true,
                    "data": [
                      {
                        "id": 1,
                        "name": "New Reseller",
                        "address": "3336 Zebra Road, Cape Town 8800",
                        "contact_number": "+2712795494",
                        "contact_person": "John Doe",
                        "lat_lng": "-18.08011,-34.73830",
                        "active": true
                      }
                    ],
                    "entries": 1,
                    "timestamp": 1723108298846
                  }
    put:
      tags:
        - Data
        - Resellers
      summary: Update object for resellers
      operationId: updateResellers
      requestBody:
        required: true
        content:
          'application/json':
            schema:
              type: object
              additionalProperties: false
              properties:
                name:
                  type: string
                  example: "BigTech Reseller"
                  maxLength: 60
                  pattern: ^[a-z A-Z]+
                address:
                  type: string
                  example: "109 BigTech Street, Cape Town 8800"
                  maxLength: 100
                contact_number:
                  type: string
                  example: '+27876545611'
                  maxLength: 20
                  pattern: ^(\+|\d)[0-9]{7,16}$
                contact_person:
                  type: string
                  example: "John Doe"
                  maxLength: 50
                  pattern: ^[a-z A-Z]+
                lat_lng:
                  type: string
                  maxLength: 50
                  example: "-18.08011,-34.73830"
                  pattern: '^[-+]?([1-8]?\d(\.\d+)?|90(\.0+)?),\s*[-+]?(180(\.0+)?|((1[0-7]\d)|([1-9]?\d))(\.\d+)?)$'
                active:
                  type: boolean
      responses:
        '200':
          description: Returns an array of "reseller" items updated by query
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ResellersResponse"
                example:
                  {
                    "success": true,
                    "data": [
                      {
                        "id": 1,
                        "name": "New Reseller",
                        "address": "3336 Zebra Road, Cape Town 8800",
                        "contact_number": "+2712795494",
                        "contact_person": "John Doe",
                        "lat_lng": "-18.08011,-34.73830",
                        "active": true
                      }
                    ],
                    "entries": 1,
                    "timestamp": 1723108298846
                  }
    delete:
      tags:
        - Data
        - Resellers
      summary: Delete object for resellers
      operationId: deleteResellers
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/DeleteResponse"
              example:
                {
                  "success": true,
                  "data": "Successfully deleted record(s). [1]",
                  "timestamp": 1723108298846
                }
          description: Returns result of delete
    parameters:
      - $ref: "#/components/parameters/idParam"
      - $ref: "#/components/parameters/limitParam"
      - $ref: "#/components/parameters/offsetParam"
      - $ref: "#/components/parameters/orderParam"
      - $ref: "#/components/parameters/countParam"
      - $ref: "#/components/parameters/others"

  '/organisations':
    post:
      tags:
        - Data
        - Organisations
      summary: Create object for an organisation
      description: |-
        Organisations are the second level in the Payway system.
        An Organisation may be linked to **MANY Resellers**, see "Organisations_Resellers", and may have many companies.

      operationId: createOrganisations
      requestBody:
        required: true
        content:
          'application/json':
            schema:
              type: object
              additionalProperties: false
              properties:
                name:
                  type: string
                  example: "BigTech Org"
                  maxLength: 60
                  pattern: ^[a-z A-Z]+
                address:
                  type: string
                  example: "109 BigTech Street, Cape Town 8800"
                  maxLength: 100
                contact_number:
                  type: string
                  example: '+27876545611'
                  maxLength: 20
                  pattern: ^(\+|\d)[0-9]{7,16}$
                contact_person:
                  type: string
                  example: "John Doe"
                  maxLength: 50
                  pattern: ^[a-z A-Z]+
                lat_lng:
                  type: string
                  maxLength: 50
                  example: "-18.08011,-34.73830"
                  pattern: '^[-+]?([1-8]?\d(\.\d+)?|90(\.0+)?),\s*[-+]?(180(\.0+)?|((1[0-7]\d)|([1-9]?\d))(\.\d+)?)$'
                active:
                  type: boolean
              required: [ "name", "address", "contact_number", "contact_person", "active" ]
      responses:
        '200':
          description: Returns organisation object created by query
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/OrganisationsResponse"
                example:
                  {
                    "success": true,
                    "data": [
                      {
                        "id": 1,
                        "name": "BigTech Org",
                        "address": "3336 Zebra Road, Cape Town 8800",
                        "contact_number": "+2712795494",
                        "contact_person": "John Doe",
                        "lat_lng": "-18.08011,-34.73830",
                        "active": true
                      }
                    ],
                    "entries": 1,
                    "timestamp": 1723628631562
                  }

  '/organisations/{id}':
    get:
      tags:
        - Data
        - Organisations
      operationId: getOrganisations
      summary: Get object for organisation
      responses:
        '200':
          description: Returns an array of "organisation" items from the database
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/OrganisationsResponse"
                example:
                  {
                    "success": true,
                    "data": [
                      {
                        "id": 1,
                        "name": "BigTech Org",
                        "address": "3336 Zebra Road, Cape Town 8800",
                        "contact_number": "+2712795494",
                        "contact_person": "John Doe",
                        "lat_lng": "-18.08011,-34.73830",
                        "active": true
                      }
                    ],
                    "entries": 1,
                    "timestamp": 1723628631562
                  }
    put:
      tags:
        - Data
        - Organisations
      summary: Update object for organisations
      operationId: updateOrganisations
      requestBody:
        required: true
        content:
          'application/json':
            schema:
              type: object
              additionalProperties: false
              properties:
                name:
                  type: string
                  example: "BigTech Org"
                  maxLength: 60
                  pattern: ^[a-z A-Z]+
                address:
                  type: string
                  example: "109 BigTech Street, Cape Town 8800"
                  maxLength: 100
                contact_number:
                  type: string
                  example: '+27876545611'
                  maxLength: 20
                  pattern: ^(\+|\d)[0-9]{7,16}$
                contact_person:
                  type: string
                  example: "John Doe"
                  maxLength: 50
                  pattern: ^[a-z A-Z]+
                lat_lng:
                  type: string
                  maxLength: 50
                  example: "-18.08011,-34.73830"
                  pattern: '^[-+]?([1-8]?\d(\.\d+)?|90(\.0+)?),\s*[-+]?(180(\.0+)?|((1[0-7]\d)|([1-9]?\d))(\.\d+)?)$'
                active:
                  type: boolean
      responses:
        '200':
          description: Returns an array of "organisation" items updated by query
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/OrganisationsResponse"
                example:
                  {
                    "success": true,
                    "data": [
                      {
                        "id": 1,
                        "name": "New Org",
                        "address": "3336 Zebra Road, Cape Town 8800",
                        "contact_number": "+2712795494",
                        "contact_person": "John Doe",
                        "lat_lng": "-18.08011,-34.73830",
                        "active": true
                      }
                    ],
                    "entries": 1,
                    "timestamp": 1723628631562
                  }
    delete:
      tags:
        - Data
        - Organisations
      operationId: deleteOrganisations
      summary: Delete object for organisations
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/DeleteResponse"
              example:
                {
                  "success": true,
                  "data": "Successfully deleted record(s). [1]",
                  "timestamp": 1723108298846
                }
          description: Returns result of delete
    parameters:
      - $ref: "#/components/parameters/idParam"
      - $ref: "#/components/parameters/limitParam"
      - $ref: "#/components/parameters/offsetParam"
      - $ref: "#/components/parameters/orderParam"
      - $ref: "#/components/parameters/countParam"
      - $ref: "#/components/parameters/others"

  '/resellers_organisations':
    post:
      tags:
        - Data
        - Resellers Organisations
      summary: Create object for reseller to organisation link
      description: |-
        This endpoint is used as a **MANY-Resellers-to-MANY-Organisations** linking table.
        If you want to link a reseller to a organisation, or vice versa, you need to add a link in this table.
        If this is not done, or done incorrectly, users will not be able to see their intended resources.

      operationId: createResellersOrganisations
      requestBody:
        required: true
        content:
          'application/json':
            schema:
              type: object
              additionalProperties: false
              properties:
                reseller_id:
                  type: integer
                  example: 3
                organisation_id:
                  type: integer
                  example: 1
              required: [ "reseller_id", "organisation_id" ]
      responses:
        '200':
          description: Returns reseller organisation link created by query
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ResellersOrganisationsResponse"
                example:
                  {
                    "success": true,
                    "data": [
                      {
                        "id": 1,
                        "reseller_id": 3,
                        "organisation_id": 1
                      }
                    ],
                    "entries": 1,
                    "timestamp": 1723108298846
                  }

  '/resellers_organisations/reseller/{id}':
    get:
      tags:
        - Data
        - Resellers Organisations
      summary: Get object for reseller organisation link by reseller id
      operationId: getResellersOrganisationsByResellerId
      responses:
        '200':
          description: Returns an array of "reseller organisation" items from the database
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ResellersOrganisationsResponse"
                example:
                  {
                    "success": true,
                    "data": [
                      {
                        "id": 1,
                        "reseller_id": 3,
                        "organisation_id": 1
                      }
                    ],
                    "entries": 1,
                    "timestamp": 1723108298846
                  }
    parameters:
      - $ref: "#/components/parameters/idParam"
      - $ref: "#/components/parameters/limitParam"
      - $ref: "#/components/parameters/offsetParam"
      - $ref: "#/components/parameters/orderParam"
      - $ref: "#/components/parameters/countParam"
      - $ref: "#/components/parameters/others"

  '/resellers_organisations/{id}':
    get:
      tags:
        - Data
        - Resellers Organisations
      summary: Get object for reseller organisation link
      operationId: getResellersOrganisations
      responses:
        '200':
          description: Returns an array of "reseller organisation" items from the database
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ResellersOrganisationsResponse"
                example:
                  {
                    "success": true,
                    "data": [
                      {
                        "id": 1,
                        "reseller_id": 3,
                        "organisation_id": 1
                      }
                    ],
                    "entries": 1,
                    "timestamp": 1723108298846
                  }
    delete:
      tags:
        - Data
        - Resellers Organisations
      summary: Delete object for resellers organisations
      operationId: deleteResellersOrganisations
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/DeleteResponse"
              example:
                {
                  "success": true,
                  "data": "Successfully deleted record(s). [1]",
                  "timestamp": 1723108298846
                }
          description: Returns result of delete
    parameters:
      - $ref: "#/components/parameters/idParam"
      - $ref: "#/components/parameters/limitParam"
      - $ref: "#/components/parameters/offsetParam"
      - $ref: "#/components/parameters/orderParam"
      - $ref: "#/components/parameters/countParam"
      - $ref: "#/components/parameters/others"

  '/companies':
    post:
      tags:
        - Data
        - Companies
      summary: Create object for company
      description: |-
        Companies are the third level in the Payway system. **A company may only be linked to ONE parent Organisation.**

      operationId: createCompanies
      requestBody:
        required: true
        content:
          'application/json':
            schema:
              type: object
              additionalProperties: false
              properties:
                name:
                  type: string
                  example: "BigTech Company"
                  maxLength: 60
                  pattern: ^[a-z A-Z]+
                address:
                  type: string
                  example: "109 BigTech Street, Cape Town 8800"
                  maxLength: 100
                contact_number:
                  type: string
                  example: '+27876545611'
                  maxLength: 20
                  pattern: ^(\+|\d)[0-9]{7,16}$
                contact_person:
                  type: string
                  example: "John Doe"
                  maxLength: 50
                  pattern: ^[a-z A-Z]+
                lat_lng:
                  type: string
                  maxLength: 50
                  example: "-18.08011,-34.73830"
                  pattern: '^[-+]?([1-8]?\d(\.\d+)?|90(\.0+)?),\s*[-+]?(180(\.0+)?|((1[0-7]\d)|([1-9]?\d))(\.\d+)?)$'
                organisation_id:
                  type: integer
                  example: 2
                email_template:
                  type: string
                  description: GZIPed string of custom HTML used for email templates.
                active:
                  type: boolean
              required: [ "name", "address", "contact_number", "contact_person", "organisation_id", "active" ]
      responses:
        '200':
          description: Returns company object created by query
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/CompaniesResponse"
                example:
                  {
                    "success": true,
                    "data": [
                      {
                        "id": 4,
                        "name": "BigTech Company",
                        "address": "109 BigTech Street, Cape Town 8800",
                        "contact_number": "+27876545611",
                        "contact_person": "John Doe",
                        "lat_lng": "-18.08011,-34.73830",
                        "organisation_id": 4,
                        "email_template": "H4sIAAAAAAAAA+1abW/bNhD+vPwKxsMwYKgsyy9N4pcMaZq2QbI27bK225eBls4WF0pUSNqON/S/j6RkWZIlO02bLu18RZOIOh3J5557MeWd/q7HXDmPAPkyoIc7/cUvwN7hDlLSD0BiFOIABrUpgVnEuKwhl4USQjmozYgn/YEHU+KCZS5q9uqDHgiXk0gSFmaevcBCzBj30BsQIJGFjrizr36dBJhQdAlBRLEEgUaMIzUDUBYBF3n7vpSRBdcTMh3UjmPD1qXaT2YaCTfS1vvqIdfHXE01+O3ymbWfGpJEUjh8C5yMiIv1ItEx80AvSLRaGxfUt2MDsTEh54u/teh5H6VXQ+bN0T/ppZYA8zEJu6iB8EQytEsCjTAOZS+nFmHPI+FY61WpGPS7yGk0fqjUGSlQrBEOCJ13kcChsITedl6JkhAsH8jYl8pcvZ2/a81geEWUFW1KBIxJ3yxMzUUwJViAV3ggEJb2gSXI32Bh76+JkPEyyw1v0v2wk/75UwHM20yVeVziIYWld6RX9I1gltGxqIiwCwr9SFZiu9TmG7QzSyDBuDCpR4SimXLPkDL3Kj/FUEUL8C4KWQiFyfGNlSHAqgeIigYeMWr4bQWK32oG4k7U/9KF4cKyDKweuIwbC8U1fIjZbyf079txBulrxqdKFEYy5vug1qilw/FQnEmy45JFldoxPXM32GikYzs7NBy7jDI+qH3/bF//W95JZtNYLQfN4ge1NCR7FWFnXJ2JEotPqIITbrAr6byHhti9GnM2Cb0uSmbu1XYUGruWhV6cHD09eYMsS10buiwhp2Ss9uqCdtVyVdNkXMGR2ZlhQm6zLlCarHdlXBOyOL6AMI9BKTAZHI2sQLbEqYcy8GUZWUAlsbNIwXyZMvvSO8xRrwBTViogy0opfFkpgTIrVbAWdcogzkoCbKdRcX+J8chIuVZK0TTclcHopoBumYXDFXs51PM3vJQdrUZtMemiJLT0hLXyR83jKqlV3kw3wl1lUVVv0bXtgBEBwo/qYyL9ybBOmA265qpkntRcVW64tay5Ks+oRDQGW3JVxCLMFQHqUTguBy0rC35v1kzjY7PqBgrl9h1jWcjyucxebcSu8JddDJlktMS/65y+xqU6c52/ev7K5K1KrY92PAmUE0VdXE+UC03VtFwvrLsssJP+zZ46dmfoPvbcVnvvYG+013b29hoN7Hjtoe109h87BwdOu9E6aFmvz87+OH1/fvz8XfP38/dnz9+eHf9qXxBXTjg0NTt+ViQKsBw4KmZmt3ZVrugWy/MixTWbJihuSz+lXhFAn8uX2wD+BgNYjehSmKmV6YOxcqpgAvbk5dNsu/FV9huFvu3O/UZi51b9hsbul6PTlyvJ7v/RiVT0GJ+lneisZqPONhsV5CvJRmb0bu2E79x2Z7kTiyNOMH2EXgCdgiQu7u18l0p8HqE+96v61lGMytwyyUQlgYbTOGnuZ+8sc0dmMJNcivZnCWdD3UjQNfW+eu9azrHKSnyOnjB2pWZCR1FUjZXtO1+oVXBWg9PZBmdBvv3grObiQj4hNp12eWx2njw+2N+7Y2zmTixb6zvx9ZF5yczBMQknoOgjfTRnE46w66o+QqJp5oz4EYooYAHIVHwkfUAjRimb6YB29fkxCSUzz6+dcZjkABxF9TVJIPpCOaC5mgOa2xxQkG0OeHj1eTUHZG6a02vTfnfNKfSd80M2A/ypo/wBhOy2p96G7H2HbLPxoMv2O/iRg6KD+qFqrg802n0Agbntp7eB+cD76XjQGjIpWZDQ8+PitpgZPlupPR3p5hn5eAoIh3N0PQGhy65YdN7rCzURRCLdvItJpF/cokhxHvXxAuwYqEXPsfp+W31CB653eotT/XLxOYyWcTpmbExBv9qoHepE1bfxGs7cd476z+j6aXUkoatkkTJV6CIfMJUv2Ex53EPD+b0TsJp0F3g+w3NNuzo6QhFn3sSVekmnr9ElUAhA8vk9fgRd8/LCXC3eWORO3pdmimf2aY1pr1bZdkmVraysX7Karq+gG6rmhkr50dXRLnNF8T2Srb/BY77Qo78Z+C/iF9CUMSgAAA==",
                        "active": true,
                      }
                    ],
                    "entries": 1,
                    "timestamp": 1723639902458
                  }

  '/companies/{id}':
    get:
      tags:
        - Data
        - Companies
      operationId: getCompanies
      summary: Get object for company
      responses:
        '200':
          description: Returns an array of "companies" items from the database
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/CompaniesResponse"
                example:
                  {
                    "success": true,
                    "data": [
                      {
                        "id": 4,
                        "name": "BigTech Company",
                        "address": "109 BigTech Street, Cape Town 8800",
                        "contact_number": "+27876545611",
                        "contact_person": "John Doe",
                        "lat_lng": "-18.08011,-34.73830",
                        "organisation_id": 4,
                        "email_template": "H4sIAAAAAAAAA+1abW/bNhD+vPwKxsMwYKgsyy9N4pcMaZq2QbI27bK225eBls4WF0pUSNqON/S/j6RkWZIlO02bLu18RZOIOh3J5557MeWd/q7HXDmPAPkyoIc7/cUvwN7hDlLSD0BiFOIABrUpgVnEuKwhl4USQjmozYgn/YEHU+KCZS5q9uqDHgiXk0gSFmaevcBCzBj30BsQIJGFjrizr36dBJhQdAlBRLEEgUaMIzUDUBYBF3n7vpSRBdcTMh3UjmPD1qXaT2YaCTfS1vvqIdfHXE01+O3ymbWfGpJEUjh8C5yMiIv1ItEx80AvSLRaGxfUt2MDsTEh54u/teh5H6VXQ+bN0T/ppZYA8zEJu6iB8EQytEsCjTAOZS+nFmHPI+FY61WpGPS7yGk0fqjUGSlQrBEOCJ13kcChsITedl6JkhAsH8jYl8pcvZ2/a81geEWUFW1KBIxJ3yxMzUUwJViAV3ggEJb2gSXI32Bh76+JkPEyyw1v0v2wk/75UwHM20yVeVziIYWld6RX9I1gltGxqIiwCwr9SFZiu9TmG7QzSyDBuDCpR4SimXLPkDL3Kj/FUEUL8C4KWQiFyfGNlSHAqgeIigYeMWr4bQWK32oG4k7U/9KF4cKyDKweuIwbC8U1fIjZbyf079txBulrxqdKFEYy5vug1qilw/FQnEmy45JFldoxPXM32GikYzs7NBy7jDI+qH3/bF//W95JZtNYLQfN4ge1NCR7FWFnXJ2JEotPqIITbrAr6byHhti9GnM2Cb0uSmbu1XYUGruWhV6cHD09eYMsS10buiwhp2Ss9uqCdtVyVdNkXMGR2ZlhQm6zLlCarHdlXBOyOL6AMI9BKTAZHI2sQLbEqYcy8GUZWUAlsbNIwXyZMvvSO8xRrwBTViogy0opfFkpgTIrVbAWdcogzkoCbKdRcX+J8chIuVZK0TTclcHopoBumYXDFXs51PM3vJQdrUZtMemiJLT0hLXyR83jKqlV3kw3wl1lUVVv0bXtgBEBwo/qYyL9ybBOmA265qpkntRcVW64tay5Ks+oRDQGW3JVxCLMFQHqUTguBy0rC35v1kzjY7PqBgrl9h1jWcjyucxebcSu8JddDJlktMS/65y+xqU6c52/ev7K5K1KrY92PAmUE0VdXE+UC03VtFwvrLsssJP+zZ46dmfoPvbcVnvvYG+013b29hoN7Hjtoe109h87BwdOu9E6aFmvz87+OH1/fvz8XfP38/dnz9+eHf9qXxBXTjg0NTt+ViQKsBw4KmZmt3ZVrugWy/MixTWbJihuSz+lXhFAn8uX2wD+BgNYjehSmKmV6YOxcqpgAvbk5dNsu/FV9huFvu3O/UZi51b9hsbul6PTlyvJ7v/RiVT0GJ+lneisZqPONhsV5CvJRmb0bu2E79x2Z7kTiyNOMH2EXgCdgiQu7u18l0p8HqE+96v61lGMytwyyUQlgYbTOGnuZ+8sc0dmMJNcivZnCWdD3UjQNfW+eu9azrHKSnyOnjB2pWZCR1FUjZXtO1+oVXBWg9PZBmdBvv3grObiQj4hNp12eWx2njw+2N+7Y2zmTixb6zvx9ZF5yczBMQknoOgjfTRnE46w66o+QqJp5oz4EYooYAHIVHwkfUAjRimb6YB29fkxCSUzz6+dcZjkABxF9TVJIPpCOaC5mgOa2xxQkG0OeHj1eTUHZG6a02vTfnfNKfSd80M2A/ypo/wBhOy2p96G7H2HbLPxoMv2O/iRg6KD+qFqrg802n0Agbntp7eB+cD76XjQGjIpWZDQ8+PitpgZPlupPR3p5hn5eAoIh3N0PQGhy65YdN7rCzURRCLdvItJpF/cokhxHvXxAuwYqEXPsfp+W31CB653eotT/XLxOYyWcTpmbExBv9qoHepE1bfxGs7cd476z+j6aXUkoatkkTJV6CIfMJUv2Ex53EPD+b0TsJp0F3g+w3NNuzo6QhFn3sSVekmnr9ElUAhA8vk9fgRd8/LCXC3eWORO3pdmimf2aY1pr1bZdkmVraysX7Karq+gG6rmhkr50dXRLnNF8T2Srb/BY77Qo78Z+C/iF9CUMSgAAA==",
                        "active": true,
                      }
                    ],
                    "entries": 1,
                    "timestamp": 1723639902458
                  }
    put:
      tags:
        - Data
        - Companies
      summary: Update object for companies
      operationId: updateCompanies
      requestBody:
        required: true
        content:
          'application/json':
            schema:
              type: object
              additionalProperties: false
              properties:
                name:
                  type: string
                  example: "BigTech Company"
                  maxLength: 60
                  pattern: ^[a-z A-Z]+
                address:
                  type: string
                  example: "109 BigTech Street, Cape Town 8800"
                  maxLength: 100
                contact_number:
                  type: string
                  example: '+27876545611'
                  maxLength: 20
                  pattern: ^(\+|\d)[0-9]{7,16}$
                contact_person:
                  type: string
                  example: "John Doe"
                  maxLength: 50
                  pattern: ^[a-z A-Z]+
                lat_lng:
                  type: string
                  maxLength: 50
                  example: "-18.08011,-34.73830"
                  pattern: '^[-+]?([1-8]?\d(\.\d+)?|90(\.0+)?),\s*[-+]?(180(\.0+)?|((1[0-7]\d)|([1-9]?\d))(\.\d+)?)$'
                organisation_id:
                  type: integer
                  example: 2
                email_template:
                  type: string
                  description: GZIPed string of custom HTML used for email templates.
                active:
                  type: boolean
      responses:
        '200':
          description: Returns an array of "companies" items updated by query
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/CompaniesResponse"
                example:
                  {
                    "success": true,
                    "data": [
                      {
                        "id": 1,
                        "name": "BigTech Company",
                        "address": "109 BigTech Street, Cape Town 8800",
                        "contact_number": "+27876545611",
                        "contact_person": "John Doe",
                        "lat_lng": "-18.08011,-34.73830",
                        "active": true
                      }
                    ],
                    "entries": 1,
                    "timestamp": 1723628631562
                  }
    delete:
      tags:
        - Data
        - Companies
      operationId: deleteCompanies
      summary: Delete object for companies
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/DeleteResponse"
              example:
                {
                  "success": true,
                  "data": "Successfully deleted record(s). [1]",
                  "timestamp": 1723108298846
                }
          description: Returns result of delete
    parameters:
      - $ref: "#/components/parameters/idParam"
      - $ref: "#/components/parameters/limitParam"
      - $ref: "#/components/parameters/offsetParam"
      - $ref: "#/components/parameters/orderParam"
      - $ref: "#/components/parameters/countParam"
      - $ref: "#/components/parameters/others"

  '/sites':
    post:
      tags:
        - Data
        - Sites
      summary: Create object for site
      description: |-
        Sites are of the fourth level in the Payway system. A site may only be linked to one parent company.
        The Booking System is managed at a site level. For a site to allow bookings, the "allow_booking" flag must be set.
        The "mifare_site_id" field is used to match the Site to it's equivalent Mifare Site (refer to MiFare API).

      operationId: createSites
      requestBody:
        required: true
        content:
          'application/json':
            schema:
              type: object
              additionalProperties: false
              properties:
                name:
                  type: string
                  example: "HighTech Site"
                  maxLength: 60
                  pattern: ^[a-z A-Z]+
                address:
                  type: string
                  example: "109 BigTech Street, Cape Town 8800"
                  maxLength: 100
                contact_number:
                  type: string
                  example: '+27876545611'
                  maxLength: 20
                  pattern: ^(\+|\d)[0-9]{7,16}$
                contact_person:
                  type: string
                  example: "John Doe"
                  maxLength: 50
                  pattern: ^[a-z A-Z]+
                lat_lng:
                  type: string
                  example: "{\"latLng\":{\"lat\":-33.848106900673486,\"lng\":18.5385}}"
                  pattern: '^[-+]?([1-8]?\d(\.\d+)?|90(\.0+)?),\s*[-+]?(180(\.0+)?|((1[0-7]\d)|([1-9]?\d))(\.\d+)?)$'
                companies_id:
                  type: integer
                  example: 5
                mifare_site_id:
                  type: integer
                  example: 5
                allow_booking:
                  type: boolean
                active:
                  type: boolean
              required: [ "name", "address", "contact_number", "contact_person", "companies_id", "active" ]
      responses:
        '200':
          description: Returns site object created by query
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/SitesResponse"
                example:
                  {
                    "success": true,
                    "data": [
                      {
                        "id": 1,
                        "name": "HighTech Site",
                        "address": "109 BigTech Street, Cape Town 8800",
                        "companies_id": 50,
                        "contact_number": "+27876545611",
                        "contact_person": "John Doe",
                        "lat_lng": "{\"latLng\":{\"lat\":-33.848106900673486,\"lng\":18.5385}}",
                        "mifare_site_id": 17,
                        "allow_booking": false,
                        "active": true

                      }
                    ],
                    "entries": 1,
                    "timestamp": 1723628631562
                  }

  '/sites/{id}':
    get:
      tags:
        - Data
        - Sites
      operationId: getSites
      summary: Get object for sites
      responses:
        '200':
          description: Returns an array of "site" items from the database
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/SitesResponse"
                example:
                  {
                    "success": true,
                    "data": [
                      {
                        "id": 1,
                        "name": "HighTech Site",
                        "address": "109 BigTech Street, Cape Town 8800",
                        "companies_id": 50,
                        "contact_number": "+27876545611",
                        "contact_person": "John Doe",
                        "lat_lng": "{\"latLng\":{\"lat\":-33.848106900673486,\"lng\":18.5385}}",
                        "mifare_site_id": 17,
                        "allow_booking": false,
                        "active": true

                      }
                    ],
                    "entries": 1,
                    "timestamp": 1723628631562
                  }
    put:
      tags:
        - Data
        - Sites
      summary: Update object for sites
      operationId: updateSites
      requestBody:
        required: true
        content:
          'application/json':
            schema:
              type: object
              additionalProperties: false
              properties:
                name:
                  type: string
                  example: "HighTech Site"
                  maxLength: 60
                  pattern: ^[a-z A-Z]+
                address:
                  type: string
                  example: "109 BigTech Street, Cape Town 8800"
                  maxLength: 100
                contact_number:
                  type: string
                  example: '+27876545611'
                  maxLength: 20
                  pattern: ^(\+|\d)[0-9]{7,16}$
                contact_person:
                  type: string
                  example: "John Doe"
                  maxLength: 50
                  pattern: ^[a-z A-Z]+
                lat_lng:
                  type: string
                  example: "{\"latLng\":{\"lat\":-33.848106900673486,\"lng\":18.5385}}"
                  pattern: '^[-+]?([1-8]?\d(\.\d+)?|90(\.0+)?),\s*[-+]?(180(\.0+)?|((1[0-7]\d)|([1-9]?\d))(\.\d+)?)$'
                companies_id:
                  type: integer
                  example: 5
                mifare_site_id:
                  type: integer
                  example: 5
                allow_booking:
                  type: boolean
                active:
                  type: boolean
      responses:
        '200':
          description: Returns an array of "site" items updated by query
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/SitesResponse"
                example:
                  {
                    "success": true,
                    "data": [
                      {
                        "id": 1,
                        "name": "HighTech Site",
                        "address": "109 BigTech Street, Cape Town 8800",
                        "companies_id": 50,
                        "contact_number": "+27876545611",
                        "contact_person": "John Doe",
                        "lat_lng": "{\"latLng\":{\"lat\":-33.848106900673486,\"lng\":18.5385}}",
                        "mifare_site_id": 17,
                        "allow_booking": false,
                        "active": true

                      }
                    ],
                    "entries": 1,
                    "timestamp": 1723628631562
                  }
    delete:
      tags:
        - Data
        - Sites
      summary: Delete object for sites
      operationId: deleteSites
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/DeleteResponse"
              example:
                {
                  "success": true,
                  "data": "Successfully deleted record(s). [1]",
                  "timestamp": 1723108298846
                }
          description: Returns result of delete
    parameters:
      - $ref: "#/components/parameters/idParam"
      - $ref: "#/components/parameters/limitParam"
      - $ref: "#/components/parameters/offsetParam"
      - $ref: "#/components/parameters/orderParam"
      - $ref: "#/components/parameters/countParam"
      - $ref: "#/components/parameters/others"

  '/devices':
    post:
      tags:
        - Data
        - Devices
      summary: Create object for device
      description: |-
        Devices are physical WiFi or SIM based modems used to connect physical hardware to the Payway system. 
        Each device has its own hardware type, found in the resource "host_hardware", and "pos_type" that defines the type of device. Each devices
        configuration can be set here. e.g poll_start, poll_end, dip and csq. 
        **A device may only be linked to ONE parent Site.**

      operationId: createDevices
      requestBody:
        required: true
        content:
          'application/json':
            schema:
              type: object
              additionalProperties: false
              properties:
                name:
                  type: string
                  maxLength: 50
                  example:
                uid:
                  type: string
                  maxLength: 50
                  pattern: ^[a-zA-Z1-9]+
                  description: Unique Identification for the device.
                  example: 'ae23db32'
                imsi:
                  type: string
                  maxLength: 50
                  pattern: ^[a-zA-Z1-9]+
                  description: International Mobile Subscriber Identity or Service Set Identifier (SSID).
                  example: '17654337383999700'
                site_code:
                  type: integer
                  description: Unique customer site code.
                  example: 'ABC123'
                pos_type_id:
                  type: integer
                host_hardware_id:
                  type: integer
                site_id:
                  type: integer
                polling_frequency:
                  type: integer
                  description: Expected number of polled calls from the device.
                scale_factor:
                  type: integer
                  description: The Bill Scale Factor when using Bill Emulation mode for MDB devices.
                time_zone:
                  type: integer
                  description: Timezone offset of the device in hours.
                screen_fitted:
                  type: boolean
                  description: Indication if an info screen is fitted together with the device on the machine.
                multiplier:
                  type: integer
                  description: Integer Value to multiply the incoming paid value by.
                divider:
                  type: integer
                  example:
                  description: Integer Value to divide the incoming paid value by.
                unit_price:
                  type: number
                  example:
                  description: The price per unit.
                ssid:
                  type: string
                  maxLength: 50
                  pattern: '^[^!#;+\]\/"\t][^+\]\/"\t]{0,30}[^ !#;+\]\/"\t]$|^[^ !#;+\]\/"\t]$'
                  description: Service Set Identifier for WiFi devices.
                password:
                  type: string
                  maxLength: 50
                  description: Service Set Identifier password for WiFi Devices.
                coupon_price:
                  type: integer
                  description: The price per unit used for MiFare Payments.
                  example:
                asset_state_id:
                  type: integer
                short_name:
                  type: string
                  maxLength: 20
                  description: Short name description used on Payment Kiosks or POS.
                machine_serial_number:
                  type: string
                  maxLength: 100
                  description: Serial number of the physical machine.
                  example: 'SWMN20045XY2323223'
                active:
                  type: boolean
              required: [ "name", "uid", "imsi", "site_id", "pos_type_id", "host_hardware_id", "polling_frequency", "scale_factor", "time_zone", "screen_fitted", "multiplier", "divider", "unit_price", "active" ]
      responses:
        '200':
          description: Returns device object created by query
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/DevicesResponse"
                example:
                  {
                    "success": true,
                    "data": [
                      {
                        "id": 1,
                        "async_ratio": "0.00",
                        "callback": 0,
                        "calls": 23,
                        "channels": 0,
                        "connected_at": "never",
                        "csq": "22,0",
                        "dip": 14,
                        "divider": 10,
                        "firmware_version": "04.13",
                        "heartbeat_rate": "0.00",
                        "host_hardware_id": null,
                        "imsi": "not reported",
                        "life_days": 1542,
                        "local_time": "2024-05-27 15:05:47",
                        "mdb_online": false,
                        "minutes_connected": "0.00",
                        "multiplier": 1,
                        "name": "21Tim",
                        "password": "P@ss",
                        "peer_host": "0.0.0.0",
                        "polling_frequency": 30,
                        "pos_type_id": 2,
                        "protocol": "unknown",
                        "scale_factor": 1,
                        "screen_fitted": false,
                        "seq": 32457,
                        "site_id": 56,
                        "ssid": "LS360",
                        "status_code": null,
                        "time_offset": -1,
                        "time_zone": 2,
                        "timestamp": "2024-05-26T22:05:04.000Z",
                        "uid": "869867035272279",
                        "unit_price": "10.00",
                        "vmc_expansion_id": "",
                        "asset_state_id": 1,
                        "coupon_price": "10.00",
                        "short_name": "T21",
                        "machine_serial_number": "878-484e",
                        "active": false,
                      }
                    ],
                    "entries": 1,
                    "timestamp": 1723628631562
                  }

  '/devices/{id}':
    get:
      tags:
        - Data
        - Devices
      operationId: getDevices
      summary: Get object for devices
      responses:
        '200':
          description: Returns an array of "device" items from the database
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/DevicesResponse"
                example:
                  {
                    "success": true,
                    "data": [
                      {
                        "id": 1,
                        "async_ratio": "0.00",
                        "callback": 0,
                        "calls": 23,
                        "channels": 0,
                        "connected_at": "never",
                        "csq": "22,0",
                        "dip": 14,
                        "divider": 10,
                        "firmware_version": "04.13",
                        "heartbeat_rate": "0.00",
                        "host_hardware_id": null,
                        "imsi": "not reported",
                        "life_days": 1542,
                        "local_time": "2024-05-27 15:05:47",
                        "mdb_online": false,
                        "minutes_connected": "0.00",
                        "multiplier": 1,
                        "name": "21Tim",
                        "password": "P@ss",
                        "peer_host": "0.0.0.0",
                        "polling_frequency": 30,
                        "pos_type_id": 2,
                        "protocol": "unknown",
                        "scale_factor": 1,
                        "screen_fitted": false,
                        "seq": 32457,
                        "site_id": 56,
                        "ssid": "LS360",
                        "status_code": null,
                        "time_offset": -1,
                        "time_zone": 2,
                        "timestamp": "2024-05-26T22:05:04.000Z",
                        "uid": "869867035272279",
                        "unit_price": "10.00",
                        "vmc_expansion_id": "",
                        "asset_state_id": 1,
                        "coupon_price": "10.00",
                        "short_name": "T21",
                        "machine_serial_number": "878-484e",
                        "active": false,
                      }
                    ],
                    "entries": 1,
                    "timestamp": 1723628631562
                  }
    put:
      tags:
        - Data
        - Devices
      summary: Update object for devices
      operationId: updateDevices
      requestBody:
        required: true
        content:
          'application/json':
            schema:
              type: object
              additionalProperties: false
              properties:
                name:
                  type: string
                  maxLength: 50
                  example:
                uid:
                  type: string
                  maxLength: 50
                  pattern: ^[a-zA-Z1-9]+
                  description: Unique Identification for the device.
                  example: 'ae23db32'
                imsi:
                  type: string
                  maxLength: 50
                  pattern: ^[a-zA-Z1-9]+
                  description: International Mobile Subscriber Identity or Service Set Identifier (SSID).
                  example: '17654337383999700'
                site_code:
                  type: integer
                  description: Unique customer site code.
                  example: 'ABC123'
                pos_type_id:
                  type: integer
                host_hardware_id:
                  type: integer
                site_id:
                  type: integer
                polling_frequency:
                  type: integer
                  description: Expected number of polled calls from the device.
                scale_factor:
                  type: integer
                  description: The Bill Scale Factor when using Bill Emulation mode for MDB devices.
                time_zone:
                  type: integer
                  description: Timezone offset of the device in hours.
                screen_fitted:
                  type: boolean
                  description: Indication if an info screen is fitted together with the device on the machine.
                multiplier:
                  type: integer
                  description: Integer Value to multiply the incoming paid value by.
                divider:
                  type: integer
                  example:
                  description: Integer Value to divide the incoming paid value by.
                unit_price:
                  type: number
                  example:
                  description: The price per unit.
                ssid:
                  type: string
                  maxLength: 50
                  pattern: '^[^!#;+\]\/"\t][^+\]\/"\t]{0,30}[^ !#;+\]\/"\t]$|^[^ !#;+\]\/"\t]$'
                  description: Service Set Identifier for WiFi devices.
                password:
                  type: string
                  maxLength: 50
                  description: Service Set Identifier password for WiFi Devices.
                coupon_price:
                  type: integer
                  description: The price per unit used for MiFare Payments.
                  example:
                asset_state_id:
                  type: integer
                short_name:
                  type: string
                  maxLength: 20
                  description: Short name description used on Payment Kiosks or POS.
                machine_serial_number:
                  type: string
                  maxLength: 100
                  description: Serial number of the physical machine.
                  example: 'SWMN20045XY2323223'
                active:
                  type: boolean
      responses:
        '200':
          description: Returns an array of "device" items updated by query
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/DevicesResponse"
                example:
                  {
                    "success": true,
                    "data": [
                      {
                        "id": 1,
                        "async_ratio": "0.00",
                        "callback": 0,
                        "calls": 23,
                        "channels": 0,
                        "connected_at": "never",
                        "csq": "22,0",
                        "dip": 14,
                        "divider": 10,
                        "firmware_version": "04.13",
                        "heartbeat_rate": "0.00",
                        "host_hardware_id": null,
                        "imsi": "not reported",
                        "life_days": 1542,
                        "local_time": "2024-05-27 15:05:47",
                        "mdb_online": false,
                        "minutes_connected": "0.00",
                        "multiplier": 1,
                        "name": "21Tim",
                        "password": "P@ss",
                        "peer_host": "0.0.0.0",
                        "polling_frequency": 30,
                        "pos_type_id": 2,
                        "protocol": "unknown",
                        "scale_factor": 1,
                        "screen_fitted": false,
                        "seq": 32457,
                        "site_id": 56,
                        "ssid": "LS360",
                        "status_code": null,
                        "time_offset": -1,
                        "time_zone": 2,
                        "timestamp": "2024-05-26T22:05:04.000Z",
                        "uid": "869867035272279",
                        "unit_price": "10.00",
                        "vmc_expansion_id": "",
                        "asset_state_id": 1,
                        "coupon_price": "10.00",
                        "short_name": "T21",
                        "machine_serial_number": "878-484e",
                        "active": false,
                      }
                    ],
                    "entries": 1,
                    "timestamp": 1723628631562
                  }
    delete:
      tags:
        - Data
        - Devices
      summary: Delete object for devices
      operationId: deleteDevices
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/DeleteResponse"
              example:
                {
                  "success": true,
                  "data": "Successfully deleted record(s). [1]",
                  "timestamp": 1723108298846
                }
          description: Returns result of delete
    parameters:
      - $ref: "#/components/parameters/idParam"
      - $ref: "#/components/parameters/limitParam"
      - $ref: "#/components/parameters/offsetParam"
      - $ref: "#/components/parameters/orderParam"
      - $ref: "#/components/parameters/countParam"
      - $ref: "#/components/parameters/others"

  '/logs_fatal/{id}':
    get:
      tags:
        - Data
        - Logs
      operationId: getLogsFatal
      summary: Get object for fatal logs
      description: |-
        This endpoint holds all Fatal Logs generated in the Payway Payment Engine.

      responses:
        '200':
          description: Returns an array of "fatal log" items from the database
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/LogsFatalResponse"
                example:
                  {
                    "success": true,
                    "data": [
                      {
                        "id": 1,
                        "webhook_timestamp": null,
                        "provider": "none",
                        "provider_id": null,
                        "uuid": "none",
                        "application": "cc_payment_gateway_logic",
                        "application_timestamp": null,
                        "application_version": "2.0.0",
                        "calling_url": "",
                        "reason": "Internal Server Error occurred",
                        "payload": "",
                        "created": "2024-07-02T13:00:59.773Z"
                      }
                    ],
                    "entries": 1,
                    "timestamp": 1723108298846
                  }

    parameters:
      - $ref: "#/components/parameters/idParam"
      - $ref: "#/components/parameters/limitParam"
      - $ref: "#/components/parameters/offsetParam"
      - $ref: "#/components/parameters/orderParam"
      - $ref: "#/components/parameters/countParam"
      - $ref: "#/components/parameters/others"


  '/logs_info/{id}':
    get:
      tags:
        - Data
        - Logs
      operationId: getLogsInfo
      summary: Get object for info logs
      description: |-
        This endpoint holds all Info Logs generated in the Payway Payment Engine.
      responses:
        '200':
          description: Returns an array of "info log" items from the database
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/LogsInfoResponse"
                example:
                  {
                    "success": true,
                    "data": [
                      {
                        "id": 1,
                        "webhook_timestamp": 1719924749423,
                        "provider": "IQT MiFare Legacy",
                        "provider_id": 6,
                        "uuid": "f0cd6ff0-3871-11ef-a4ac-8526e161eb2f",
                        "application": "cc_payment_gateway_logic",
                        "application_timestamp": 1719924749423,
                        "application_version": "2.0.0",
                        "calling_url": "",
                        "reason": "unknown",
                        "payload": "",
                        "created": "2024-07-02T12:52:29.482Z"
                      }
                    ],
                    "entries": 1,
                    "timestamp": 1723715090987
                  }
    parameters:
      - $ref: "#/components/parameters/idParam"
      - $ref: "#/components/parameters/limitParam"
      - $ref: "#/components/parameters/offsetParam"
      - $ref: "#/components/parameters/orderParam"
      - $ref: "#/components/parameters/countParam"
      - $ref: "#/components/parameters/others"

  '/logs_warning/{id}':
    get:
      tags:
        - Data
        - Logs
      operationId: getLogsWarning
      summary: Get object for warning logs
      description: |-
        This endpoint holds all Warning Logs generated in the Payway Payment Engine.
      responses:
        '200':
          description: Returns an array of "warning log" items from the database
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/LogsWarningResponse"
                example:
                  {
                    "success": true,
                    "data": [
                      {
                        "id": 1,
                        "webhook_timestamp": 1719924749423,
                        "provider": "IQT MiFare Legacy",
                        "provider_id": 6,
                        "uuid": "f0cd6ff0-3871-11ef-a4ac-8526e161eb2f",
                        "application": "cc_payment_gateway_logic",
                        "application_timestamp": 1719924749423,
                        "application_version": "2.0.0",
                        "calling_url": "",
                        "reason": "unknown",
                        "payload": "",
                        "created": "2024-07-02T12:52:29.482Z"
                      }
                    ],
                    "entries": 1,
                    "timestamp": 1723715090987
                  }
    parameters:
      - $ref: "#/components/parameters/idParam"
      - $ref: "#/components/parameters/limitParam"
      - $ref: "#/components/parameters/offsetParam"
      - $ref: "#/components/parameters/orderParam"
      - $ref: "#/components/parameters/countParam"
      - $ref: "#/components/parameters/others"

  '/providers':
    post:
      tags:
        - Data
        - Providers
      summary: Create object for provider
      description: |-
        This endpoint is used to define providers that are supported by the Payway system.
        Providers are integrations between Payway and an external payment systems, e.g Snapscan or Mastercard.

      operationId: createProviders
      requestBody:
        required: true
        content:
          'application/json':
            schema:
              type: object
              additionalProperties: false
              properties:
                name:
                  type: string
                  maxLength: 50
                  example: Snapscan
                logo_url:
                  type: string
                  example: 'https://google.com/image.png'
                  description: Link to png used for logo
                color:
                  type: string
                  maxLength: 10
                  pattern: '^#(?:[0-9a-fA-F]{3}){1,2}$'
                  example: '#7795f3'
                  description: Hex code colour
                active:
                  type: boolean
              required: [ "name", "active" ]
      responses:
        '200':
          description: Returns provider object created by query
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ProvidersResponse"
                example:
                  {
                    "success": true,
                    "data": [
                      {
                        "id": 1,
                        "name": "Snapscan",
                        "color": "#7795f3",
                        "logo_url": "https://google.com/image.png",
                        "active": true
                      }
                    ],
                    "entries": 1,
                    "timestamp": 1723628631562
                  }


  '/providers/{id}':
    get:
      tags:
        - Data
        - Providers
      operationId: getProviders
      summary: Get object for providers
      responses:
        '200':
          description: Returns an array of "provider" items from the database
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ProvidersResponse"
                example:
                  {
                    "success": true,
                    "data": [
                      {
                        "id": 1,
                        "name": "Snapscan",
                        "color": "#7795f3",
                        "logo_url": "https://google.com/image.png",
                        "active": true
                      }
                    ],
                    "entries": 1,
                    "timestamp": 1723628631562
                  }
    put:
      tags:
        - Data
        - Providers
      summary: Update object for providers
      operationId: updateProviders
      requestBody:
        required: true
        content:
          'application/json':
            schema:
              type: object
              additionalProperties: false
              properties:
                name:
                  type: string
                  maxLength: 50
                  example: Snapscan
                logo_url:
                  type: string
                  example: 'https://google.com/image.png'
                color:
                  type: string
                  maxLength: 10
                  pattern: '^#(?:[0-9a-fA-F]{3}){1,2}$'
                  example: '#7795f3'
                active:
                  type: boolean
      responses:
        '200':
          description: Returns an array of "provider" items updated by query
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ProvidersResponse"
                example:
                  {
                    "success": true,
                    "data": [
                      {
                        "id": 1,
                        "name": "Snapscan",
                        "color": "#7795f3",
                        "logo_url": "https://google.com/image.png",
                        "active": true
                      }
                    ],
                    "entries": 1,
                    "timestamp": 1723628631562
                  }
    parameters:
      - $ref: "#/components/parameters/idParam"
      - $ref: "#/components/parameters/limitParam"
      - $ref: "#/components/parameters/offsetParam"
      - $ref: "#/components/parameters/orderParam"
      - $ref: "#/components/parameters/countParam"
      - $ref: "#/components/parameters/others"

  '/pos_types':
    post:
      tags:
        - Data
        - Pos Types
      summary: Create object for pos types
      description: |-
        This endpoint is used to create POS (Point Of Sale) types. These define the technology used by hardware e.g Wifi, LTE and 
        Firmware Release Versions.

      operationId: createPosTypes
      requestBody:
        required: true
        content:
          'application/json':
            schema:
              type: object
              additionalProperties: false
              properties:
                name:
                  type: string
                  example: 'WIFI'
                  maxLength: 50
                version:
                  type: string
                  example: '1.0.0'
                  maxLength: 10
                  pattern: '^\d+\.\d+\.\d+$'
                  description: Version of firmware used.
                active:
                  type: boolean
              required: [ "name", "active" ]
      responses:
        '200':
          description: Returns pos type object created by query
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/PosTypesResponse"
                example:
                  {
                    "success": true,
                    "data": [
                      {
                        "id": 1,
                        "name": "WIFI",
                        "version": "1.0",
                        "active": true
                      }
                    ],
                    "entries": 1,
                    "timestamp": 1723108298846
                  }

  '/pos_types/{id}':
    get:
      tags:
        - Data
        - Pos Types
      operationId: getPosTypes
      summary: Get object for pos types
      responses:
        '200':
          description: Returns an array of "pos type" items from the database
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/PosTypesResponse"
                example:
                  {
                    "success": true,
                    "data": [
                      {
                        "id": 1,
                        "name": "WIFI",
                        "version": "1.0",
                        "active": true
                      }
                    ],
                    "entries": 1,
                    "timestamp": 1723108298846
                  }
    put:
      tags:
        - Data
        - Pos Types
      summary: Update object for pos types
      operationId: updatePosTypes
      requestBody:
        required: true
        content:
          'application/json':
            schema:
              type: object
              additionalProperties: false
              properties:
                name:
                  type: string
                  example: 'WIFI'
                  maxLength: 50
                version:
                  type: string
                  example: '1.0.0'
                  maxLength: 10
                  pattern: '^\d+\.\d+\.\d+$'
                  description: Version of firmware used.
                active:
                  type: boolean
      responses:
        '200':
          description: Returns an array of "pos type" items updated by query
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/PosTypesResponse"
                example:
                  {
                    "success": true,
                    "data": [
                      {
                        "id": 1,
                        "name": "WIFI",
                        "version": "1.0",
                        "active": true
                      }
                    ],
                    "entries": 1,
                    "timestamp": 1723108298846
                  }
    parameters:
      - $ref: "#/components/parameters/idParam"
      - $ref: "#/components/parameters/limitParam"
      - $ref: "#/components/parameters/offsetParam"
      - $ref: "#/components/parameters/orderParam"
      - $ref: "#/components/parameters/countParam"
      - $ref: "#/components/parameters/others"

  '/host_hardware':
    post:
      tags:
        - Data
        - Host Hardware
      summary: Create object for host hardware
      description: |-
        This endpoint is used to define different types of host hardware devices, physical hardware that Payway hardware integrates into, in the field, eg: 
        * Speedqueen SWMN216 Washing Machine.
        * Azkoyn Palma Vending Machine.
        
        All hardware specific values like cycle time, cycle signal source, hardware type, payment emulation and additional notes can be set here.

      operationId: createHostHardware
      requestBody:
        required: true
        content:
          'application/json':
            schema:
              type: object
              additionalProperties: false
              properties:
                name:
                  type: string
                  maxLength: 50
                  example: "Washer 3000"
                cycle_time:
                  type: integer
                  example: 60
                  description: Time in minutes
                notes:
                  type: string
                  example: "The best washer ever!"
                  description: Used to add any additional notes or information about the hardware.
                cycle_signal_source:
                  type: integer
                  example: 1
                  description: Indicates whether the cycle signal is coming from the machine (0) or theoretical time (1).
                hardware_type_id:
                  type: integer
                  example: 3
                reseller_id:
                  type: integer
                  example: 1
                emulation_id:
                  type: integer
                  example: 7
                active:
                  type: boolean
              required: [ "name", "hardware_type_id", "reseller_id", "emulation_id", "active" ]
      responses:
        '200':
          description: Returns host hardware object created by query
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/HostHardwareResponse"
                example:
                  {
                    "success": true,
                    "data": [
                      {
                        "id": 1,
                        "name": "Washer 3000",
                        "reseller_id": 1,
                        "hardware_type_id": 3,
                        "notes": "The best washer ever!",
                        "cycle_signal_source": 1,
                        "cycle_time": 30,
                        "emulation_id": 2,
                        "active": true,
                      }
                    ],
                    "entries": 1,
                    "timestamp": 1723639902458
                  }


  '/host_hardware/{id}':
    get:
      tags:
        - Data
        - Host Hardware
      operationId: getHostHardware
      summary: Get object for host hardware
      responses:
        '200':
          description: Returns an array of "host hardware" items from the database
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/HostHardwareResponse"
                example:
                  {
                    "success": true,
                    "data": [
                      {
                        "id": 1,
                        "name": "Washer 3000",
                        "reseller_id": 1,
                        "hardware_type_id": 3,
                        "notes": "The best washer ever!",
                        "cycle_signal_source": 1,
                        "cycle_time": 30,
                        "emulation_id": 2,
                        "active": true,
                      }
                    ],
                    "entries": 1,
                    "timestamp": 1723639902458
                  }
    put:
      tags:
        - Data
        - Host Hardware
      summary: Update object for host hardware
      operationId: updateHostHardware
      requestBody:
        required: true
        content:
          'application/json':
            schema:
              type: object
              additionalProperties: false
              properties:
                name:
                  type: string
                  maxLength: 50
                  example: "Washer 3000"
                cycle_time:
                  type: integer
                  example: 60
                  description: Time in minutes
                notes:
                  type: string
                  example: "The best washer ever!"
                  description: Used to add any additional notes or information about the hardware.
                cycle_signal_source:
                  type: integer
                  example: 1
                  description: Indicates whether the cycle signal is coming from the machine (0) or theoretical time (1).
                hardware_type_id:
                  type: integer
                  example: 3
                reseller_id:
                  type: integer
                  example: 1
                emulation_id:
                  type: integer
                  example: 7
                active:
                  type: boolean
      responses:
        '200':
          description: Returns an array of "host hardware" items updated by query
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/HostHardwareResponse"
                example:
                  {
                    "success": true,
                    "data": [
                      {
                        "id": 1,
                        "name": "Washer 3000",
                        "reseller_id": 1,
                        "hardware_type_id": 3,
                        "notes": "The best washer ever!",
                        "cycle_signal_source": 1,
                        "cycle_time": 30,
                        "emulation_id": 2,
                        "active": true,
                      }
                    ],
                    "entries": 1,
                    "timestamp": 1723639902458
                  }
    parameters:
      - $ref: "#/components/parameters/idParam"
      - $ref: "#/components/parameters/limitParam"
      - $ref: "#/components/parameters/offsetParam"
      - $ref: "#/components/parameters/orderParam"
      - $ref: "#/components/parameters/countParam"
      - $ref: "#/components/parameters/others"

  '/status_codes':
    post:
      tags:
        - Data
        - Status Codes
      summary: Create object for status codes
      description: |-
        This endpoint is used to manage status codes. Status codes are codes identifying an action during payments/transactions.
        e.g Status code 1 ---- Pending transaction.

      operationId: createStatusCodes
      requestBody:
        required: true
        content:
          'application/json':
            schema:
              type: object
              additionalProperties: false
              properties:
                name:
                  type: string
                  maxLength: 50
                  pattern: ^[a-z A-Z]+
                  example: "COMPLETED"
                  description: Name of event
                code:
                  type: integer
                  example: 101
                color:
                  type: string
                  maxLength: 10
                  pattern: '^#(?:[0-9a-fA-F]{3}){1,2}$'
                  example: '#7795f3'
                  description: Hex code colour
                refund_sale:
                  type: boolean
                  description: Indicates if this status code permits refund actions.
                success:
                  type: boolean
                  description: Indicates if this status code is a success code.
                active:
                  type: boolean
              required: [ "name", "code", "color", "refund_sale", "success", "active" ]
      responses:
        '200':
          description: Returns status code object created by query
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/StatusCodesResponse"
                example:
                  {
                    "success": true,
                    "data": [
                      {
                        "id": 1,
                        "name": "COMPLETED",
                        "code": 101,
                        "color": "#7795f3",
                        "refund_sale": false,
                        "success": false,
                        "active": true,
                      }
                    ],
                    "entries": 1,
                    "timestamp": 1723108298846
                  }


  '/status_codes/{id}':
    get:
      tags:
        - Data
        - Status Codes
      operationId: getStatusCodes
      summary: Get object for status code
      responses:
        '200':
          description: Returns an array of "status code" items from the database
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/StatusCodesResponse"
                example:
                  {
                    "success": true,
                    "data": [
                      {
                        "id": 1,
                        "name": "COMPLETED",
                        "code": 101,
                        "color": "#7795f3",
                        "refund_sale": false,
                        "success": false,
                        "active": true,
                      }
                    ],
                    "entries": 1,
                    "timestamp": 1723108298846
                  }
    put:
      tags:
        - Data
        - Status Codes
      summary: Update object for status codes
      operationId: updateStatusCodes
      requestBody:
        required: true
        content:
          'application/json':
            schema:
              type: object
              additionalProperties: false
              properties:
                name:
                  type: string
                  maxLength: 50
                  pattern: ^[a-z A-Z]+
                  example: "COMPLETED"
                  description: Name of event
                code:
                  type: integer
                  example: 101
                color:
                  type: string
                  maxLength: 10
                  pattern: '^#(?:[0-9a-fA-F]{3}){1,2}$'
                  example: '#7795f3'
                  description: Hex code colour,
                refund_sale:
                  type: boolean
                  description: Indicates if this status code permits refund actions.
                success:
                  type: boolean
                  description: Indicates if this status code is a success code.
                active:
                  type: boolean
      responses:
        '200':
          description: Returns an array of "status code" items updated by query
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/StatusCodesResponse"
                example:
                  {
                    "success": true,
                    "data": [
                      {
                        "id": 1,
                        "name": "COMPLETED",
                        "code": 101,
                        "color": "#7795f3",
                        "refund_sale": false,
                        "success": false,
                        "active": true,
                      }
                    ],
                    "entries": 1,
                    "timestamp": 1723108298846
                  }
    parameters:
      - $ref: "#/components/parameters/idParam"
      - $ref: "#/components/parameters/limitParam"
      - $ref: "#/components/parameters/offsetParam"
      - $ref: "#/components/parameters/orderParam"
      - $ref: "#/components/parameters/countParam"
      - $ref: "#/components/parameters/others"

  '/emulations':
    post:
      tags:
        - Data
        - Emulations
      summary: Create object for emulations
      description: |-
        This endpoint is used to manage emulation types. Emulation types are the different methods
        of emulating a pulse in a physical machine that uses coin based payments. e.g Vending machine accepting coins.

      operationId: createEmulations
      requestBody:
        required: true
        content:
          'application/json':
            schema:
              type: object
              additionalProperties: false
              properties:
                name:
                  type: string
                  maxLength: 50
                  pattern: ^[a-z A-Z]+
                  example: "Coin Pulse"
                active:
                  type: boolean
              required: [ "name", "active" ]
      responses:
        '200':
          description: Returns emulation object created by query
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/EmulationsResponse"
                example:
                  {
                    "success": true,
                    "data": [
                      {
                        "id": 1,
                        "name": "Coin Pulse",
                        "active": true,
                      }
                    ],
                    "entries": 1,
                    "timestamp": 1723108298846
                  }

  '/emulations/{id}':
    get:
      tags:
        - Data
        - Emulations
      summary: Get object for emulation
      operationId: getEmulations
      responses:
        '200':
          description: Returns an array of "emulation" items from the database
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/EmulationsResponse"
                example:
                  {
                    "success": true,
                    "data": [
                      {
                        "id": 1,
                        "name": "Coin Pulse",
                        "active": true,
                      }
                    ],
                    "entries": 1,
                    "timestamp": 1723108298846
                  }
    put:
      tags:
        - Data
        - Emulations
      summary: Update object for emulations
      operationId: updateEmulations
      requestBody:
        required: true
        content:
          'application/json':
            schema:
              type: object
              additionalProperties: false
              properties:
                name:
                  type: string
                  maxLength: 50
                  pattern: ^[a-z A-Z]+
                  example: "Coin Pulse"
                active:
                  type: boolean
      responses:
        '200':
          description: Returns an array of "emulation" items updated by query
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/EmulationsResponse"
                example:
                  {
                    "success": true,
                    "data": [
                      {
                        "id": 1,
                        "name": "Coin Pulse",
                        "active": true,
                      }
                    ],
                    "entries": 1,
                    "timestamp": 1723108298846
                  }
    parameters:
      - $ref: "#/components/parameters/idParam"
      - $ref: "#/components/parameters/limitParam"
      - $ref: "#/components/parameters/offsetParam"
      - $ref: "#/components/parameters/orderParam"
      - $ref: "#/components/parameters/countParam"
      - $ref: "#/components/parameters/others"

  '/connectivity_history/{id}':
    get:
      tags:
        - Data
        - Connectivity History
      operationId: getConnectivityHistory
      summary: Get object for connectivity history
      description: |-
        Obtain device polling / connectivity history.  
        * **pfN** ---- Connectivity History frequency for hour of day __N__.
        * **sfN** ---- Session frequency for hour of day __N__.

      responses:
        '200':
          description: List of connectivity history objects
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ConnectivityHistoryResponse"
                example:
                  {
                    "success": true,
                    "data": [
                      {
                        "id": 1,
                        "timestamp": 1720396800000,
                        "device_id": 1,
                        "pf0": 0,
                        "pf1": 0,
                        "pf2": 0,
                        "pf3": 0,
                        "pf4": 0,
                        "pf5": 0,
                        "pf6": 0,
                        "pf7": 0,
                        "pf8": 0,
                        "pf9": 0,
                        "pf10": 287,
                        "pf11": 417,
                        "pf12": 288,
                        "pf13": 385,
                        "pf14": 0,
                        "pf15": 0,
                        "pf16": 0,
                        "pf17": 0,
                        "pf18": 0,
                        "pf19": 0,
                        "pf20": 0,
                        "pf21": 0,
                        "sf0": 0,
                        "sf1": 0,
                        "sf2": 0,
                        "sf3": 0,
                        "sf4": 0,
                        "sf5": 0,
                        "sf6": 0,
                        "sf7": 0,
                        "sf8": 0,
                        "sf9": 0,
                        "sf10": 1,
                        "sf11": 2,
                        "sf12": 5,
                        "sf13": 1,
                        "sf14": 0,
                        "sf15": 0,
                        "sf16": 0,
                        "sf17": 0,
                        "sf18": 0,
                        "sf19": 0,
                        "sf20": 0,
                        "sf21": 0
                      }
                    ],
                    "entries": 1,
                    "timestamp": 1723108298846
                  }
      parameters:
        - $ref: "#/components/parameters/idParam"
        - $ref: "#/components/parameters/limitParam"
        - $ref: "#/components/parameters/offsetParam"
        - $ref: "#/components/parameters/orderParam"
        - $ref: "#/components/parameters/countParam"
        - $ref: "#/components/parameters/others"

  '/companies_providers':
    post:
      tags:
        - Data
        - Companies Providers
      summary: Create object for company provider
      description: |-
        This endpoint is used to link and manage each companies payment integration and providers.
        This includes their API keys, merchant ids, callback URLs, tokens, etc.
        A company may be linked to many providers, but may not be linked to many of the same provider.

      operationId: createCompaniesProviders
      requestBody:
        required: true
        content:
          'application/json':
            schema:
              type: object
              additionalProperties: false
              properties:
                provider_id:
                  type: integer
                  example: 1
                company_id:
                  type: integer
                  example: 5
                merchant_id:
                  type: string
                  example: '6789A'
                  maxLength: 50
                pos_token:
                  type: string
                  example: '373-034534-ad354-a335'
                  maxLength: 50
                  description: API Key or other forms of authentication.
                provider_site_id:
                  type: string
                  example: '47724'
                  maxLength: 20
                callback_url:
                  type: string
                  example: 'https://zapper.com/webhook'
                  description: If callback authentication, specify the URL here.
                allow_refund:
                  type: boolean
                active:
                  type: boolean
              required: [ "provider_id", "company_id", "allow_refund", "active" ]
      responses:
        '200':
          description: Returns company provider object created by query
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/CompaniesProvidersResponse"
                example:
                  {
                    "success": true,
                    "data": [
                      {
                        "id": 1,
                        "provider_id": 1,
                        "company_id": 5,
                        "merchant_id": "6789A",
                        "pos_token": "373-034534-ad354-a335",
                        "provider_site_id": "47724",
                        "callback_url": "https://zapper.com/webhook",
                        "allow_refund": false,
                        "active": true
                      }
                    ],
                    "entries": 1,
                    "timestamp": 1723639902458
                  }

  '/companies_providers/{id}':
    get:
      tags:
        - Data
        - Companies Providers
      operationId: getCompaniesProviders
      summary: Get object for company provider
      responses:
        '200':
          description: Returns an array of "company provider" items from the database
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/CompaniesProvidersResponse"
                example:
                  {
                    "success": true,
                    "data": [
                      {
                        "id": 1,
                        "provider_id": 1,
                        "company_id": 5,
                        "merchant_id": "6789A",
                        "pos_token": "373-034534-ad354-a335",
                        "provider_site_id": "47724",
                        "callback_url": "https://zapper.com/webhook",
                        "allow_refund": false,
                        "active": true
                      }
                    ],
                    "entries": 1,
                    "timestamp": 1723639902458
                  }
    put:
      tags:
        - Data
        - Companies Providers
      summary: Update object for company provider
      operationId: updateCompaniesProviders
      requestBody:
        required: true
        content:
          'application/json':
            schema:
              type: object
              additionalProperties: false
              properties:
                provider_id:
                  type: integer
                  example: 1
                company_id:
                  type: integer
                  example: 5
                merchant_id:
                  type: string
                  example: '6789A'
                  maxLength: 50
                pos_token:
                  type: string
                  example: '373-034534-ad354-a335'
                  maxLength: 50
                  description: API Key or other forms of authentication.
                provider_site_id:
                  type: string
                  example: '47724'
                  maxLength: 20
                callback_url:
                  type: string
                  example: 'https://zapper.com/webhook'
                  description: If callback authentication, specify the URL here.
                allow_refund:
                  type: boolean
                active:
                  type: boolean
      responses:
        '200':
          description: Returns an array of "company provider" items updated by query
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/CompaniesProvidersResponse"
                example:
                  {
                    "success": true,
                    "data": [
                      {
                        "id": 1,
                        "provider_id": 1,
                        "company_id": 5,
                        "merchant_id": "6789A",
                        "pos_token": "373-034534-ad354-a335",
                        "provider_site_id": "47724",
                        "callback_url": "https://zapper.com/webhook",
                        "allow_refund": false,
                        "active": true
                      }
                    ],
                    "entries": 1,
                    "timestamp": 1723639902458
                  }
    parameters:
      - $ref: "#/components/parameters/idParam"
      - $ref: "#/components/parameters/limitParam"
      - $ref: "#/components/parameters/offsetParam"
      - $ref: "#/components/parameters/orderParam"
      - $ref: "#/components/parameters/countParam"
      - $ref: "#/components/parameters/others"

  '/transactions/{id}':
    get:
      tags:
        - Data
        - Transactions
      operationId: getTransactions
      summary: Get object for transactions
      description: |-
        This endpoint is used to retrieve and view transactions. This is a history of transactions processed by the Payway Payment Engine.
      responses:
        '200':
          description: Returns an array of "transaction" items from the database
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/TransactionsResponse"
                example:
                  {
                    "success": true,
                    "data": [
                      {
                        "id": 131,
                        "acknowledged": 80,
                        "amount": "32.00",
                        "company_id": 7,
                        "credit": "0.00",
                        "customer_name": "unknown",
                        "device_id": 4010,
                        "divider": 1,
                        "emulation_id": 3,
                        "end_run": 0,
                        "end_time": null,
                        "item": null,
                        "multiplier": 1,
                        "organisation_id": 7,
                        "payment_date": "24-07-12 10:37:06",
                        "payment_id": "691100-53416",
                        "payment_reference": "ae6ec0-803a-11bb-88e6-11634890y2f7",
                        "provider_id": 2,
                        "retry": 0,
                        "site_id": 153,
                        "start_run": 0,
                        "start_time": null,
                        "time": "2024-07-12T10:37:06.203Z",
                        "timestamp": 1720780626202,
                        "uid": "e465b8a4ed60    ",
                        "uuid": "aee5eec0-403a-11ef-88e6-116a4589c2f7"
                      }
                    ],
                    "entries": 1,
                    "timestamp": 1723108298846
                  }
      parameters:
        - $ref: "#/components/parameters/idParam"
        - $ref: "#/components/parameters/limitParam"
        - $ref: "#/components/parameters/offsetParam"
        - $ref: "#/components/parameters/orderParam"
        - $ref: "#/components/parameters/countParam"
        - $ref: "#/components/parameters/others"

  '/refunds/{id}':
    get:
      tags:
        - Data
        - Refunds
      operationId: getRefunds
      summary: Get object for refunds
      responses:
        '200':
          description: Returns an array of "refund" items from the database
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/RefundsResponse"
                example:
                  {
                    "success": true,
                    "data": [
                      {
                        "id": 4,
                        "organisation_id": 10,
                        "companies_id": 10,
                        "amount": 10,
                        "device_uid": 736e740b,
                        "refund_reference": null,
                        "payment_reference": "Zapper",
                        "provider_id": 1,
                        "site_id": 10,
                        "status": null,
                        "transaction_id": 1
                      }
                    ],
                    "entries": 1,
                    "timestamp": 1723108298846
                  }
    parameters:
      - $ref: "#/components/parameters/idParam"
      - $ref: "#/components/parameters/limitParam"
      - $ref: "#/components/parameters/offsetParam"
      - $ref: "#/components/parameters/orderParam"
      - $ref: "#/components/parameters/countParam"
      - $ref: "#/components/parameters/others"

  '/asset_states':
    post:
      tags:
        - Data
        - Asset States
      summary: Create object for asset states
      description: |-
        This endpoint is used to track assets owned by a reseller, or others, and actions or movements of these assets.
        e.g:
        * Device is broken. 
        * Device in maintenance.
        * Device in trade.

      operationId: createAssetStates
      requestBody:
        required: true
        content:
          'application/json':
            schema:
              type: object
              additionalProperties: false
              properties:
                state:
                  type: string
                  maxLength: 50
                  example: "Out of order"
                reseller_id:
                  type: integer
                  example: 1
                active:
                  type: boolean
              required: [ "state", "reseller_id", "active" ]
      responses:
        '200':
          description: Returns asset state object created by query
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/AssetStatesResponse"
                example:
                  {
                    "success": true,
                    "data": [
                      {
                        "id": 1,
                        "reseller_id": 1,
                        "state": "Out of order",
                        "active": true,
                      }
                    ],
                    "entries": 1,
                    "timestamp": 1723108298846
                  }

  '/asset_states/{id}':
    get:
      tags:
        - Data
        - Asset States
      operationId: getAssetStates
      summary: Get object for asset states
      responses:
        '200':
          description: Returns an array of "asset state" items from the database
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/AssetStatesResponse"
                example:
                  {
                    "success": true,
                    "data": [
                      {
                        "id": 1,
                        "reseller_id": 1,
                        "state": "Out of order",
                        "active": true,
                      }
                    ],
                    "entries": 1,
                    "timestamp": 1723108298846
                  }
    put:
      tags:
        - Data
        - Asset States
      summary: Update object for asset states
      operationId: updateAssetStates
      requestBody:
        required: true
        content:
          'application/json':
            schema:
              type: object
              additionalProperties: false
              properties:
                state:
                  type: string
                  maxLength: 50
                  example: "Out of order"
                reseller_id:
                  type: integer
                  example: 1
                active:
                  type: boolean
      responses:
        '200':
          description: Returns an array of "asset state" items updated by query
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/AssetStatesResponse"
                example:
                  {
                    "success": true,
                    "data": [
                      {
                        "id": 1,
                        "reseller_id": 1,
                        "state": "Out of order",
                        "active": true,
                      }
                    ],
                    "entries": 1,
                    "timestamp": 1723108298846
                  }
    parameters:
      - $ref: "#/components/parameters/idParam"
      - $ref: "#/components/parameters/limitParam"
      - $ref: "#/components/parameters/offsetParam"
      - $ref: "#/components/parameters/orderParam"
      - $ref: "#/components/parameters/countParam"
      - $ref: "#/components/parameters/others"

  '/device_activity_audit':
    post:
      tags:
        - Data
        - Device Activity Audit
      summary: Create object for device activity audit
      description: |-
        This endpoint is used to track and manage device movements and asset_state changes.
      operationId: createDeviceActivityAudit
      requestBody:
        required: true
        content:
          'application/json':
            schema:
              type: object
              additionalProperties: false
              properties:
                device_id:
                  type: integer
                  example: 104
                user_id:
                  type: integer
                  example: 4
                site_id:
                  type: integer
                  example: 9
                asset_state_id:
                  type: integer
                  example: 1
                notes:
                  type: string
                  example: "Testing this device"
                  description: Anything of note or extra information can be added here.
                timestamp:
                  type: string
                  example: "2024-08-13T10:33:38.323Z"
                  description: Time of entry creation in UTC.
              required: [ "device_id", "user_id", "site_id", "asset_state_id" ]
      responses:
        '200':
          description: Returns device activity audit object created by query
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/DeviceActivityAuditResponse"
                example:
                  {
                    "success": true,
                    "data": [
                      {
                        "id": 1,
                        "device_id": 104,
                        "asset_state_id": 1,
                        "site_id": 9,
                        "user_id": 4,
                        "notes": "Testing this device",
                        "timestamp": "2024-08-13T10:33:38.323Z"
                      }
                    ],
                    "entries": 1,
                    "timestamp": 1723628631562
                  }

  '/device_activity_audit/{id}':
    get:
      tags:
        - Data
        - Device Activity Audit
      operationId: getDeviceActivityAudit
      summary: Get object for device activity audit
      responses:
        '200':
          description: Returns an array of "device activity audit" items from the database
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/DeviceActivityAuditResponse"
                example:
                  {
                    "success": true,
                    "data": [
                      {
                        "id": 1,
                        "device_id": 104,
                        "asset_state_id": 1,
                        "site_id": 9,
                        "user_id": 4,
                        "notes": "Testing this device",
                        "timestamp": "2024-08-13T10:33:38.323Z"
                      }
                    ],
                    "entries": 1,
                    "timestamp": 1723628631562
                  }
    put:
      tags:
        - Data
        - Device Activity Audit
      summary: Update object for device activity audits
      operationId: updateDeviceActivityAudit
      requestBody:
        required: true
        content:
          'application/json':
            schema:
              type: object
              additionalProperties: false
              properties:
                device_id:
                  type: integer
                  example: 104
                user_id:
                  type: integer
                  example: 4
                site_id:
                  type: integer
                  example: 9
                asset_state_id:
                  type: integer
                  example: 1
                notes:
                  type: string
                  example: "Testing this device"
                  description: Anything of note or extra information can be added here.
                timestamp:
                  type: string
                  example: "2024-08-13T10:33:38.323Z"
                  description: Time of entry creation in UTC.
      responses:
        '200':
          description: List of device activity audit objects
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/DeviceActivityAuditResponse"
                example:
                  {
                    "success": true,
                    "data": [
                      {
                        "id": 1,
                        "device_id": 104,
                        "asset_state_id": 1,
                        "site_id": 9,
                        "user_id": 4,
                        "notes": "Testing this device",
                        "timestamp": "2024-08-13T10:33:38.323Z"
                      }
                    ],
                    "entries": 1,
                    "timestamp": 1723628631562
                  }
    parameters:
      - $ref: "#/components/parameters/idParam"
      - $ref: "#/components/parameters/limitParam"
      - $ref: "#/components/parameters/offsetParam"
      - $ref: "#/components/parameters/orderParam"
      - $ref: "#/components/parameters/countParam"
      - $ref: "#/components/parameters/others"

  '/bookings/{id}':
    get:
      tags:
        - Data
        - Bookings
      operationId: getBookings
      summary: Get object for bookings
      description: |-
        This endpoint is used to obtain all booking objects.
        By default all devices have 2 weeks of booking slots generated by the backend. These 2 weeks are in the future, 
        and not in the past. In other words, there will always be a rolling 2 week period of bookings.
        
        Status, booking_guid (randomly generated unique identifier), version and customer_id fields are all [parallel arrays](https://www.geeksforgeeks.org/parallel-array/) of 24 length. Each position in the array represents a hour
        in the day.
        
        e.g:
        customer_id ---- [0,2,6,1,0,0,4,6,5,8,0,1,3,0,0,0,0,0,0,0,0,0,0,0]
        * Position 3 of array, customer id "6", is the 3rd hour / 03:00 in the day. 
      

      responses:
        '200':
          description: Returns an array of "booking" items from the database
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/BookingsResponse"
                example:
                  {
                    "success": true,
                    "data": [
                      {
                        "id": 1,
                        "date": "2024-08-08T11:58:52.032Z",
                        "booking_guid": [
                          "57e8ffae-558e-11ef-af9f-4bbe8661d8e8",
                          "57e8ffaf-558e-11ef-af9f-cf8b36714bd7",
                          "57e8ffb0-558e-11ef-af9f-5b2c5ebd9dc5",
                          "57e8ffb1-558e-11ef-af9f-5bf8ad8a0dff",
                          "57e8ffb2-558e-11ef-af9f-3feacc8b3a27",
                          "57e8ffb3-558e-11ef-af9f-473d60c096f4",
                          "57e8ffb4-558e-11ef-af9f-5b73a8db1e0a",
                          "57e8ffb5-558e-11ef-af9f-ffcd4ca01865",
                          "57e8ffb6-558e-11ef-af9f-7fe35d411510",
                          "57e8ffb7-558e-11ef-af9f-fb2929e833cf",
                          "57e8ffb8-558e-11ef-af9f-e34010195cd2",
                          "57e8ffb9-558e-11ef-af9f-63d02f60a895",
                          "57e8ffba-558e-11ef-af9f-eb0108c6e265",
                          "57e8ffbb-558e-11ef-af9f-83e06496a479",
                          "57e8ffbc-558e-11ef-af9f-0f472645aab3",
                          "57e8ffbd-558e-11ef-af9f-836f06d1ba00",
                          "57e8ffbe-558e-11ef-af9f-d73b9bb274e5",
                          "57e8ffbf-558e-11ef-af9f-7baf89099b29",
                          "57e8ffc0-558e-11ef-af9f-bf51939434aa",
                          "57e8ffc1-558e-11ef-af9f-637e501d567f",
                          "57e8ffc2-558e-11ef-af9f-4f3fc8c697c6",
                          "57e8ffc3-558e-11ef-af9f-4fd4e7e8838e",
                          "57e8ffc4-558e-11ef-af9f-4303c2637358",
                          "57e8ffc5-558e-11ef-af9f-8b4b07af0656"
                        ],
                        "device_id": 2523,
                        "status": [
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0
                        ],
                        "version": [
                          1,
                          1,
                          1,
                          1,
                          1,
                          1,
                          1,
                          1,
                          1,
                          1,
                          1,
                          1,
                          1,
                          1,
                          1,
                          1,
                          1,
                          1,
                          1,
                          1,
                          1,
                          1,
                          1,
                          1
                        ],
                        "customer_id": [
                          "0",
                          "0",
                          "0",
                          "0",
                          "0",
                          "0",
                          "0",
                          "0",
                          "0",
                          "0",
                          "0",
                          "0",
                          "0",
                          "0",
                          "0",
                          "0",
                          "0",
                          "0",
                          "0",
                          "0",
                          "0",
                          "0",
                          "0",
                          "0"
                        ],
                        "slot": [
                          1,
                          2,
                          3,
                          4,
                          5,
                          6,
                          7,
                          8,
                          9,
                          10,
                          11,
                          12,
                          13,
                          14,
                          15,
                          16,
                          17,
                          18,
                          19,
                          20,
                          21,
                          22,
                          23,
                          24
                        ],
                        "site_id": 30
                      }
                    ],
                    "entries": 1,
                    "timestamp": 1723715090987
                  }
    parameters:
      - $ref: "#/components/parameters/idParam"
      - $ref: "#/components/parameters/limitParam"
      - $ref: "#/components/parameters/offsetParam"
      - $ref: "#/components/parameters/orderParam"
      - $ref: "#/components/parameters/countParam"
      - $ref: "#/components/parameters/others"

  '/missed_bookings/{id}':
    get:
      tags:
        - Data
        - Bookings
      operationId: getMissedBookings
      summary: Get object for missed bookings.
      description: |-
        This endpoint is used to obtain all missed booking objects.
        
        When a customer does not start the booked device within 20 minutes of their booking
        booking slot, machine not activated by customer, their missed booking is placed automatically into this table.
        
        Customers are blocked automatically after TODO missed bookings.

      responses:
        '200':
          description: Returns an array of "missed bookings" items from the database
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/MissedBookingsResponse"
                example:
                  {
                    "success": true,
                    "data": [
                      {
                        "id": 1,
                        "booking_guid": "333",
                        "customer_uid": "3",
                        "date": "2024-08-22T10:47:58.000Z",
                        "slot": 3,
                        "company_id": 10,
                        "organisation_id": 10,
                        "site_id": 10,
                        "device_id": 10
                      }
                    ],
                    "entries": 1,
                    "timestamp": 1723715090987
                  }
    delete:
      tags:
        - Data
        - Bookings
      summary: Delete object for missed bookings
      operationId: deleteMissedBookings
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/DeleteResponse"
              example:
                {
                  "success": true,
                  "data": "Successfully deleted record(s). [1]",
                  "timestamp": 1723108298846
                }
          description: Returns result of delete
    parameters:
      - $ref: "#/components/parameters/idParam"
      - $ref: "#/components/parameters/limitParam"
      - $ref: "#/components/parameters/offsetParam"
      - $ref: "#/components/parameters/orderParam"
      - $ref: "#/components/parameters/countParam"
      - $ref: "#/components/parameters/others"

  '/notifications':
    post:
      tags:
        - Data
        - Notifications
      summary: Create object for notifications
      description: |-
        This endpoint is used to create notifications that can be viewed in apps or websites. This contains announcements, alerts or any other
        communication.

      operationId: createNotifications
      requestBody:
        required: true
        content:
          'application/json':
            schema:
              type: object
              additionalProperties: false
              properties:
                id:
                  type: integer
                summary:
                  type: string
                  example: "Zapper Downtime"
                  description: Short summary, usually used for a title.
                description:
                  type: string
                  example: "Zapper is currently not working, please notify customers."
                  description: More in depth summary, usually used for a body.
                severity:
                  type: string
                  enum: [ "info", "warning", "critical" ]
                  example: "info"
                  description: Level of notification.
                start_time:
                  type: string
                  example: "2024-07-12T10:37:06.203Z"
                  description: Start time that the notification should be shown.
                end_time:
                  type: string
                  example: "2024-07-15T10:37:06.203Z"
                  description: End time that the notification should be hidden.
                created_at:
                  type: string
                  example: "2024-07-12T10:37:06.203Z"
                active:
                  type: boolean
              required: [ "summary", "severity", "start_time", "end_time", "active" ]
      responses:
        '200':
          description: Returns notification object created by query
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/NotificationsResponse"
                example:
                  {
                    "success": true,
                    "data": [
                      {
                        "id": 1,
                        "summary": "Zapper Downtime",
                        "description": "Zapper is currently not working, please notify customers.",
                        "severity": "info",
                        "start_time": "2024-07-12T10:37:06.203Z",
                        "end_time": "2024-07-15T10:37:06.203Z",
                        "created_at": "2024-07-12T10:37:06.203Z",
                        "active": false,
                      }
                    ],
                    "entries": 1,
                    "timestamp": 1723628631562
                  }

  '/notifications/{id}':
    get:
      tags:
        - Data
        - Notifications
      operationId: getNotifications
      summary: Get object for notifications
      responses:
        '200':
          description: Returns an array of "notification" items from the database
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/NotificationsResponse"
                example:
                  {
                    "success": true,
                    "data": [
                      {
                        "id": 1,
                        "summary": "Zapper Downtime",
                        "description": "Zapper is currently not working, please notify customers.",
                        "severity": "info",
                        "start_time": "2024-07-12T10:37:06.203Z",
                        "end_time": "2024-07-15T10:37:06.203Z",
                        "created_at": "2024-07-12T10:37:06.203Z",
                        "active": false,
                      }
                    ],
                    "entries": 1,
                    "timestamp": 1723628631562
                  }
    put:
      tags:
        - Data
        - Notifications
      summary: Update object for notifications
      operationId: updateNotifications
      requestBody:
        required: true
        content:
          'application/json':
            schema:
              type: object
              additionalProperties: false
              properties:
                id:
                  type: integer
                summary:
                  type: string
                  example: "Zapper Downtime"
                  description: Short summary, usually used for a title.
                description:
                  type: string
                  example: "Zapper is currently not working, please notify customers."
                  description: More in depth summary, usually used for a body.
                severity:
                  type: string
                  enum: [ "info", "warning", "critical" ]
                  example: "info"
                  description: Level of notification.
                start_time:
                  type: string
                  example: "2024-07-12T10:37:06.203Z"
                  description: Start time that the notification should be shown.
                end_time:
                  type: string
                  example: "2024-07-15T10:37:06.203Z"
                  description: End time that the notification should be hidden.
                created_at:
                  type: string
                  example: "2024-07-12T10:37:06.203Z"
                active:
                  type: boolean
      responses:
        '200':
          description: Returns an array of "notification" items updated by query
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/NotificationsResponse"
                example:
                  {
                    "success": true,
                    "data": [
                      {
                        "id": 1,
                        "summary": "Zapper Downtime",
                        "description": "Zapper is currently not working, please notify customers.",
                        "severity": "info",
                        "start_time": "2024-07-12T10:37:06.203Z",
                        "end_time": "2024-07-15T10:37:06.203Z",
                        "created_at": "2024-07-12T10:37:06.203Z",
                        "active": false,
                      }
                    ],
                    "entries": 1,
                    "timestamp": 1723628631562
                  }
    delete:
      tags:
        - Data
        - Notifications
      summary: Delete object for notifications
      operationId: deleteNotifications
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/DeleteResponse"
              example:
                {
                  "success": true,
                  "data": "Successfully deleted record(s). [1]",
                  "timestamp": 1723108298846
                }
          description: Returns result of delete
    parameters:
      - $ref: "#/components/parameters/idParam"
      - $ref: "#/components/parameters/limitParam"
      - $ref: "#/components/parameters/offsetParam"
      - $ref: "#/components/parameters/orderParam"
      - $ref: "#/components/parameters/countParam"
      - $ref: "#/components/parameters/others"


components:
  securitySchemes:
    XUserToken:
      type: apiKey
      in: header
      name: x-user-token
  schemas:
    AccessResponse:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        operation_id:
          type: string
          description: |-
            Operation ids are plain text representations of the open-api resources, e.g deleteCustomers.
            These values can be found in the OpenAPI spec, and are defined under every endpoint type.
        can_access:
          type: boolean
    RolesResponse:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        reseller_id:
          type: integer
        organisation_id:
          type: integer
        company_id_list:
          type: array
          description: If array is empty, access to all companies linked to user. If not empty, only defined companies in array are accessible by user.
          items:
            type: integer
        site_id_list:
          type: array
          description: If array is empty, access to all sites linked to user. If not empty, only defined sites in array are accessible by user.
          items:
            type: integer
        device_id_list:
          type: array
          description: If array is empty, access to all devices linked to user. If not empty, only defined devices in array are accessible by user.
          items:
            type: integer
        is_reseller:
          type: boolean
    UsersResponse:
      type: object
      properties:
        id:
          type: integer
        displayname:
          type: string
        email:
          type: string
        email_verified:
          type: boolean
        contact_number:
          type: string
        last_login_at:
          type: string
        google_id:
          type: string
        token:
          type: string
        last_login_error:
          type: string
        side_bar_toggled:
          type: string
        firebase_id:
          type: string
        currency:
          type: string
          description: Defines the type of current a user is using.
        delimiter:
          type: string
        proxy_user:
          type: boolean
          description: Special user that should only be used in certain cases.
        password_reset:
          type: boolean
          description: Define if password reset required.
        active:
          type: boolean
    AuthenticationResponse:
      type: object
      properties:
        id:
          type: integer
        token:
          type: string
          description: x-user-token used in all endpoints.
        contact_number:
          type: string
        currency:
          type: string
        delimiter:
          type: string
        displayname:
          type: string
        email:
          type: string
        email_verified:
          type: boolean
        firebase_id:
          type: string
        google_id:
          type: string
        sidebar_toggled:
          type: boolean
        active:
          type: boolean
    PasswordResetResponse:
      type: string
      description: Response returned by Firebase
    UserAccessResponse:
      type: object
      properties:
        id:
          type: integer
        user_id:
          type: integer
        access_id:
          type: integer
    UserRolesResponse:
      type: object
      properties:
        id:
          type: integer
        user_id:
          type: integer
        role_id:
          type: integer
    ResellersOrganisationsResponse:
      type: object
      properties:
        id:
          type: integer
        reseller_id:
          type: integer
        organisation_id:
          type: integer
    UserAccessDetailResponse:
      type: object
      properties:
        id:
          type: integer
        user_id:
          type: integer
        access_id:
          type: integer
        name:
          type: string
        operation_id:
          type: string
        can_access:
          type: boolean
    ResellersResponse:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        address:
          type: string
        contact_number:
          type: string
        contact_person:
          type: string
        lat_lng:
          type: string
        active:
          type: boolean
    OrganisationsResponse:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        address:
          type: string
        contact_number:
          type: string
        contact_person:
          type: string
        lat_lng:
          type: string
        active:
          type: boolean
    CompaniesResponse:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        organisation_id:
          type: string
        address:
          type: string
        contact_number:
          type: string
        contact_person:
          type: string
        lat_lng:
          type: string
        email_template:
          type: string
          description: GZIPed string of custom HTML used for email templates.
        active:
          type: boolean
    SitesResponse:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        address:
          type: string
        contact_number:
          type: string
        contact_person:
          type: string
        lat_lng:
          type: string
        companies_id:
          type: integer
        mifare_site_id:
          type: integer
        active:
          type: boolean
    DevicesResponse:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        uid:
          type: string
          description: Unique Identification for the device.
        imsi:
          type: string
          description: International Mobile Subscriber Identity or Service Set Identifier (SSID).
        site_code:
          type: integer
          description: Unique customer site code.
        site_id:
          type: integer
        pos_type_id:
          type: integer
        host_hardware_id:
          type: integer
        polling_frequency:
          type: integer
          description: Expected number of polled calls from the device.
        scale_factor:
          type: integer
          description: The Bill Scale Factor when using Bill Emulation mode for MDB devices.
        time_zone:
          type: integer
          description: Timezone offset of the device in hours.
        screen_fitted:
          type: boolean
          description: Indication if an info screen is fitted together with the device on the machine.
        callback:
          type: integer
        calls:
          type: integer
        local_time:
          type: string
        vmc_expansion_id:
          type: string
        timestamp:
          type: string
        time_offset:
          type: integer
        firmware_version:
          type: string
        mdb_online:
          type: boolean
        seq:
          type: integer
        csq:
          type: string
        dip:
          type: integer
        life_days:
          type: integer
        multiplier:
          type: integer
          description: Integer Value to multiply the incoming paid value by.
        divider:
          type: integer
          description: Integer Value to divide the incoming paid value by.
        unit_price:
          type: number
          description: The price per unit.
        ssid:
          type: string
          description: Service Set Identifier for WiFi devices.
        password:
          type: string
          description: Service Set Identifier password for WiFi Devices.
        connected_at:
          type: string
        peer_host:
          type: string
        async_ratio:
          type: string
        protocol:
          type: string
        channels:
          type: integer
        minutes_connected:
          type: integer
        heartbeat_rate:
          type: string
        status_code:
          type: integer
        asset_state_id:
          type: integer
        coupon_price:
          type: integer
          description: The price per unit used for MiFare Payments.
        short_name:
          type: string
          description: Short name description used on Payment Kiosks or POS.
        allow_booking:
          type: boolean
        machine_serial_number:
          type: string
          description: Serial number of the physical machine.
        active:
          type: boolean
    LogsFatalResponse:
      type: object
      properties:
        id:
          type: integer
        webhook_timestamp:
          type: integer
        provider:
          type: string
        provider_id:
          type: integer
        uuid:
          type: string
        application:
          type: string
        application_timestamp:
          type: integer
        application_version:
          type: string
        calling_url:
          type: string
        reason:
          type: string
        payload:
          type: string
    LogsInfoResponse:
      type: object
      properties:
        id:
          type: integer
        webhook_timestamp:
          type: integer
        provider:
          type: string
        provider_id:
          type: integer
        uuid:
          type: string
        application:
          type: string
        application_timestamp:
          type: integer
        application_version:
          type: string
        calling_url:
          type: string
        reason:
          type: string
        payload:
          type: string
    LogsWarningResponse:
      type: object
      properties:
        id:
          type: integer
        webhook_timestamp:
          type: integer
        provider:
          type: string
        provider_id:
          type: integer
        uuid:
          type: string
        application:
          type: string
        application_timestamp:
          type: integer
        application_version:
          type: string
        calling_url:
          type: string
        reason:
          type: string
        payload:
          type: string
    ProvidersResponse:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        logo_url:
          type: string
          description: Link to png used for logo
        color:
          type: string
          description: Hex code colour
        active:
          type: boolean
    PosTypesResponse:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        version:
          type: string
          description: Version of firmware used.
        active:
          type: boolean
    HostHardwareResponse:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        cycle_time:
          type: integer
          description: Time in minutes
        notes:
          type: string
          description: Used to add any additional notes or information about the hardware.
        cycle_signal_source:
          type: integer
          description: Indicates whether the cycle signal is coming from the machine (0) or theoretical time (1).
        hardware_type_id:
          type: integer
        reseller_id:
          type: integer
        emulation_id:
          type: integer
        active:
          type: boolean
    StatusCodesResponse:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
          description: Name of event
        code:
          type: integer
        color:
          type: string
          description: Hex code colour
        refund_sale:
          type: boolean
          description: Indicates if this status code permits refund actions.
        success:
          type: boolean
          description: Indicates if this status code is a success code.
        active:
          type: boolean
    EmulationsResponse:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        active:
          type: boolean
    ConnectivityHistoryResponse:
      type: object
      properties:
        id:
          type: integer
        timestamp:
          type: string
        device_id:
          type: integer
        pf0:
          type: integer
        pf1:
          type: integer
        pf2:
          type: integer
        pf3:
          type: integer
        pf4:
          type: integer
        pf5:
          type: integer
        pf6:
          type: integer
        pf7:
          type: integer
        pf8:
          type: integer
        pf9:
          type: integer
        pf10:
          type: integer
        pf11:
          type: integer
        pf12:
          type: integer
        pf13:
          type: integer
        pf14:
          type: integer
        pf15:
          type: integer
        pf16:
          type: integer
        pf17:
          type: integer
        pf18:
          type: integer
        pf19:
          type: integer
        pf20:
          type: integer
        pf21:
          type: integer
        pf22:
          type: integer
        pf23:
          type: integer
        sf0:
          type: integer
        sf1:
          type: integer
        sf2:
          type: integer
        sf3:
          type: integer
        sf4:
          type: integer
        sf5:
          type: integer
        sf6:
          type: integer
        sf7:
          type: integer
        sf8:
          type: integer
        sf9:
          type: integer
        sf10:
          type: integer
        sf11:
          type: integer
        sf12:
          type: integer
        sf13:
          type: integer
        sf14:
          type: integer
        sf15:
          type: integer
        sf16:
          type: integer
        sf17:
          type: integer
        sf18:
          type: integer
        sf19:
          type: integer
        sf20:
          type: integer
        sf21:
          type: integer
        sf22:
          type: integer
        sf23:
          type: integer
    CompaniesProvidersResponse:
      type: object
      properties:
        id:
          type: integer
        provider_id:
          type: integer
        company_id:
          type: integer
        merchant_id:
          type: string
        pos_token:
          type: string
          description: API Key or other forms of authentication.
        provider_site_id:
          type: string
        callback_url:
          type: string
          description: If callback authentication, specify the URL here.
        allow_refund:
          type: boolean
        active:
          type: boolean
    TransactionsResponse:
      type: object
      properties:
        id:
          type: integer
        acknowledged:
          type: integer
        emulation_id:
          type: integer
        provider_id:
          type: integer
        company_id:
          type: integer
        organisation_id:
          type: integer
        site_id:
          type: integer
        device_id:
          type: integer
        uid:
          type: string
        amount:
          type: number
        payment_id:
          type: string
        payment_reference:
          type: string
        time:
          type: string
        timestamp:
          type: integer
        payment_date:
          type: string
        customer_name:
          type: string
        multiplier:
          type: integer
        divider:
          type: integer
        credit:
          type: number
        item:
          type: integer
        retry:
          type: integer
        uuid:
          type: string
        start_run:
          type: integer
        start_time:
          type: integer
        end_run:
          type: integer
        end_time:
          type: integer
    AssetStatesResponse:
      type: object
      properties:
        id:
          type: integer
        state:
          type: string
        reseller_id:
          type: integer
        active:
          type: boolean
    RefundsResponse:
      type: object
      properties:
        id:
          type: integer
        companies_id:
          type: integer
        organisations_id:
          type: integer
        site_id:
          type: integer
        provider_id:
          type: integer
        transaction_id:
          type: integer
        device_uid:
          type: string
        payment_reference:
          type: string
        refund_reference:
          type: string
        amount:
          type: number
        status:
          type: string
    DeviceActivityAuditResponse:
      type: object
      properties:
        id:
          type: integer
        device_id:
          type: integer
        user_id:
          type: integer
        site_id:
          type: integer
        asset_state_id:
          type: integer
        notes:
          type: string
          description: Anything of note or extra information can be added here.
        timestamp:
          type: string
          description: Time of entry creation in UTC.
    CustomersResponse:
      type: object
      properties:
        id:
          type: integer
        first_name:
          type: string
        last_name:
          type: string
        customer_identification:
          type: string
        email:
          type: string
        contact_number:
          type: string
        consent_number:
          type: boolean
        consent_email:
          type: boolean
        user_id:
          type: integer
          description: The id of the proxy user (service account).
        blocked:
          type: boolean
          description: Prevents user from accessing the API.
        daily_booking_limit:
          type: integer
          description: The total number of bookings a user can make in one day.
        verified:
          type: boolean
          description: Has the user verified their email?
        email_sent_amount:
          type: integer
    BookingsResponse:
      type: object
      properties:
        id:
          type: integer
        date:
          type: string
        booking_guid:
          type: array
          items:
            type: string
        device_id:
          type: integer
        status:
          type: array
          items:
            type: integer
        version:
          type: array
          items:
            type: integer
        customer_id:
          type: array
          items:
            type: integer
        slot:
          type: array
          items:
            type: integer
        site_id:
          type: integer
    MissedBookingsResponse:
      type: object
      properties:
        id:
          type: integer
        date:
          type: string
        slot:
          type: integer
        bookings_guid:
          type: string
        company_id:
          type: integer
        organisation_id:
          type: integer
        site_id:
          type: integer
        device_id:
          type: integer
        customer_uid:
          type: string
    NotificationsResponse:
      type: object
      properties:
        id:
          type: integer
        summary:
          type: string
        description:
          type: string
        created_at:
          type: string
        active:
          type: boolean
    DeleteResponse:
      type: object
      properties:
        success:
          type: boolean
        data:
          type: string
        timestamp:
          type: string

    # Status codes
    ValidationFailResponse:
      type: object
      properties:
        err:
          type: object
          example:
            {
              "err": [
                {
                  "instancePath": "/requestBody",
                  "schemaPath": "#/properties/requestBody/additionalProperties",
                  "keyword": "additionalProperties",
                  "params": {
                    "additionalProperty": "emulation_id"
                  },
                  "message": "must NOT have additional properties"
                }
              ]
            }
    AccountNotActiveResponse:
      type: object
      properties:
        err:
          type: string
          example:
            {
              "err": "Account is not active. [John Doe]"
            }
          description: User has been deactivated.
    AccountPasswordResetResponse:
      type: object
      properties:
        err:
          type: string
          example:
            {
              "err": "Please reset password before login. [John Doe]"
            }
          description: User needs to reset their password before being allowed login access again.
    UnauthorizedResponse:
      type: object
      properties:
        err:
          type: string
          example:
            {
              "err": "Unauthorized. [getUserAccess]"
            }
          description: User does not have permissions to access endpoint operation.
    ErrorResponse:
      type: object
      properties:
        err:
          type: string
          example:
            {
              "success": false,
              "error": "[INTERNAL] error: insert or update on table \"devices\" violates foreign key constraint \"devices_host_hardware_id_fk\"",
              "timestamp": 1725273348975
            }
          description: Any internal error is returned here.



    numberIndex:
      type: integer
      minimum: 1
    selectAll:
      type: string
      enum:
        - _all

  parameters:
    idParam:
      in: path
      name: id
      required: true
      schema:
        oneOf:
          - $ref: "#/components/schemas/numberIndex"
          - $ref: "#/components/schemas/selectAll"
      examples:
        id:
          value: 12
          summary: Search by specific primary key aka "id".
        all:
          value: '_all'
          summary: Search by all accessible objects.

    offsetParam:
      in: query
      name: offset
      required: false
      schema:
        type: integer
        minimum: 0
      example: 1

    limitParam:
      in: query
      name: limit
      required: false
      schema:
        type: integer
        minimum: 0
      example: 3

    orderParam:
      in: query
      name: order_by
      required: false
      schema:
        anyOf:
          - type: string
            pattern: ^\w+:(asc|desc)$
          - type: array
            items:
              type: string
            pattern: ^\w+:(asc|desc)$
      examples:
        asc:
          value: "field:asc"
          summary: Filters the field specific by ascending order.
        desc:
          value: "field:desc"
          summary: Filters the field specific by descending order.

    countParam:
      in: query
      name: count_entries
      required: false
      schema:
        type: boolean
      example: true

    others:
      in: query
      name: field_name
      schema:
        additionalProperties: true
      examples:
        textContaining:
          value: "%Store%"
          summary: Searches in specific field for text containing the word "Store".
        textStart:
          value: "Store%"
          summary: Searches in specific field for text starting with the word "Store".
        textEnd:
          value: "%Store"
          summary: Searches in specific field for text ending with the word "Store".
        textFind:
          value: "Store"
          summary: Searches in specific field for text equaling to "Store".
        numberFind:
          value: 108
          summary: Searches in specific field for number equaling to "108".
        dateFind:
          value: "2024-08-01 00:00:00"
          summary: Searches in specific field for date equaling to "2024-08-01 00:00:00".



security:
  - XUserToken: [ ]


